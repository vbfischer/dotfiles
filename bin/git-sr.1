#!/bin/sh
# set this to workaround expr problems in shFlags on freebsd
if uname -s | egrep -iq 'bsd'; then export EXPR_COMPAT=1; fi
export GITFLOW_DIR=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")

# Use the shFlags project to parse the command line arguments
. "$GITFLOW_DIR/shFlags"

# load common functionality
. "$GITFLOW_DIR/gitflow-common"

parse_args() {
  # parse options
	FLAGS "$@" || exit $?

  eval set -- "${FLAGS_ARGV}"

	# read arguments into global variables
	VERSION=$1
	BRANCH=$PREFIX$VERSION
}

require_base_is_on_master() {
	if ! git branch --no-color --contains "$BASE" 2>/dev/null \
			| sed 's/[* ] //g' \
	  		| grep -q "^$MASTER_BRANCH\$"; then
		die "fatal: Given base '$BASE' is not a valid commit on '$MASTER_BRANCH'."
	fi
}

init() {
  require_git_repo
  require_gitflow_initialized
  gitflow_load_settings
  VERSION_PREFIX=$(eval "echo `git config --get gitflow.prefix.versiontag`")

  PREFIX=sr
}

usage() {
  echo "usage: git sr <subcommand>"
  echo
  echo "       git sr start <version>"
  echo "       git sr finish <version>"
  echo "       git sr publish <version>"
  echo "       git sr track <version>"
}

main() {
  if [ $# -lt 1 ]; then
    usage
    exit 1
  fi

  init

  start "$@"
}

list() {
  parse_args "$@"
  local sr_branches
  local current_branch
  local short_names

  sr_branches=$(echo "$(git_local_branches)" | grep "^$PREFIX")

  if [ -z "$sr_branches" ]; then
	  warn "No SR branches exist."
    warn ""
    warn "You can start a new SR branch:"
    warn ""
    warn "    git sr start <version> [<base>]"
    warn ""
		exit 0
  fi

  current_branch=$(git branch --no-color | grep '^\* ' | grep -v 'no branch' | sed 's/^* //g')
  short_names=$(echo "$sr_branches" | sed "s ^$PREFIX  g")

  # determine coluimn width first

  local width=0
  
  local branch
  for branch in $short_names; do
    local len=${#branch}
		width=$(max $width $len)
  done

  width=$(($width+3))

  local branch
  for branch in $short_names; do
    local fullname=$PREFIX$branch
    local base=$(git merge-base "$fullname" "$MASTER_BRANCH")
		local master_sha=$(git rev-parse "$MASTER_BRANCH")
		local branch_sha=$(git rev-parse "$fullname")
    if [ "$fullname" = "$current_branch" ]; then
			printf "* "
		else
			printf "  "
		fi

    printf "%-${width}s" "$branch"
    if [ "$branch_sha" = "$master_sha" ]; then
				printf "(no commits yet)"
    else
      local tagname=$(git name-rev --tags --no-undefined --name-only "$base")
      local nicename
      if [ "$tagname" != "" ]; then
        nicename=$tagname
      else
        nicename=$(git rev-parse --short "$base")
      fi
      printf "(based on $nicename)"
    fi
  done
}

start() {
  DEFINE_boolean fetch false "fetch from $ORIGIN before performing finish" F
  parse_args "$@"
  BASE=${2:-$MASTER_BRANCH}

  echo $FLAGS_fetch
  
  if flag fetch; then
    echo "fetch"
  else 
    echo "dont fetch"
  fi
}

main "$@"


