{"mode":"editor","version":1,"windowDimensions":{"x":239,"y":22,"width":1201,"height":878},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/bryce/Library/Application Support/Alfred 2/Alfred.alfredpreferences/workflows/user.workflow.A2165C98-CA18-467C-A6EC-8E2C84968710","buffers":[{"text":"import sys\nimport alp\nimport codecs # Using codecs to work with other languages. utf-8 codecs.open(todo_file,'r',encoding='utf-8')\nfrom alp.item import Item as I\n\ndef build_line(words,start=1):\n    \"\"\"Returns a line made of the concatenation of all words\n    starting from start\n    words: list of words\n    start: list index to start concatenation\"\"\"\n    line = ''\n    for word in words[start:]:\n        if len(line)==0:\n            line = word\n        else:\n            line = line + ' ' + word\n    return line\n\ndef main():\n    q = sys.argv\n\n    # Load todos from file\n    todo_file = q.pop(1) # Path to todo.txt file\n    f = codecs.open(todo_file,'r',encoding='utf-8')\n    todos = f.readlines()\n    f.close()\n\n    feedback = []\n    line = ''\n\n    # Build command line.\n    line = build_line(q,1)\n    addItem = I(title=\"Add Todo\", subtitle=line, arg=u\"add {0}\".format(line), valid=True)\n\n    # No words written\n    if len(q)==1:\n        if len(todos):\n            tmpfeedback = []\n            for r in todos:\n                if r[0] == '(' and r[2] == ')' and r[1]:\n                    pri = r[1].upper()\n                else:\n                    pri = 'z'\n                tmpfeedback.append((pri,I(title=format(todos.index(r)+1)+':'+r, subtitle=\"Mark as Done\", arg=u\"do {0}\".format(todos.index(r)+1), valid=True)))\n        else:\n            tmpfeedback.append(addItem)\n        tmpfeedback.sort(key=lambda reg: reg[0])\n        feedback = [tmpfeedback[i][1] for i in range(len(tmpfeedback))]\n    # Exactly one word written.\n    elif len(q)==2:\n        if q[1] in ['archive','deduplicate']:\n            # Leave other specific actions unaltered by the program.\n            feedback.append(I(title=\"Parse to todo.sh\", subtitle=\"Other Actions\", arg=u\"-f {0}\".format(line), valid=True))\n        feedback.append(addItem)\n        if len(todos):\n            t = alp.fuzzy_search(line, todos, key=lambda x: x)\n            tmpfeedback = []\n            for r in t:\n                if r[0] == '(' and r[2] == ')' and r[1]:\n                    pri = r[1].upper()\n                else:\n                    pri = 'z'\n                tmpfeedback.append((pri,I(title=format(todos.index(r)+1)+':'+r, subtitle=\"Mark as Done\", arg=u\"do {0}\".format(todos.index(r)+1), valid=True)))\n            tmpfeedback.sort(key=lambda reg: reg[0] )\n            for i in range(len(tmpfeedback)):\n                feedback.append(tmpfeedback[i][1])\n    # More than one word:\n    else:\n        if q[1] in ['a','add','ls','list']: # Ignore these key words.\n            line = build_line(q,2)\n            addItem = I(title=\"Add Todo\", subtitle=line, arg=u\"add {0}\".format(line), valid=True)\n        if q[1] in ['addm','addto','append','app','pri','p','del','rm','depri','dp','do']:\n            # Leave other specific actions unaltered by the program.\n            feedback.append(I(title=\"Parse to todo.sh\", subtitle=\"Other Actions\", arg=u\"-f {0}\".format(line), valid=True))\n            feedback.append(addItem)\n        else:\n            feedback.append(addItem)\n            t = alp.fuzzy_search(line, todos, key=lambda x: x)\n            tmpfeedback = []\n            for r in t:\n                if r[0] == '(' and r[2] == ')' and r[1]:\n                    pri = r[1].upper()\n                else:\n                    pri = 'z'\n                tmpfeedback.append((pri,I(title=format(todos.index(r)+1)+':'+r, subtitle=\"Mark as Done\", arg=u\"do {0}\".format(todos.index(r)+1), valid=True)))\n            tmpfeedback.sort(key=lambda reg: reg[0] )\n            for i in range(len(tmpfeedback)):\n                feedback.append(tmpfeedback[i][1])\n\n    alp.feedback(feedback)\n\nif __name__ == \"__main__\":\n    main()\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":24},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/Library/Application Support/Alfred 2/Alfred.alfredpreferences/workflows/user.workflow.A2165C98-CA18-467C-A6EC-8E2C84968710/todo.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"45d0b41e58b7731a1e3bbcfea6c823d1b52baa3a","deserializer":"TextBuffer"},{"text":"todo list | grep -o '[^ ]*+[^ ]\\+' | grep '^+' | sort -u | sed 's/^+//g'","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,72]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":28,"goalBufferRange":null,"autoscroll":false},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"id":1,"oldParams":{"properties":{"type":"selection","editorId":28}},"newParams":{"properties":{"type":"selection","editorId":28,"goalBufferRange":null}},"deserializer":"MarkerPatch"},{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,73]],"oldText":"","newText":"grep -o '[^ ]*+[^ ]\\+' \"$TODO_FILE\" | grep '^+' | sort -u | sed 's/^+//g'","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,23],[0,36]],"newRange":[[0,23],[0,23]],"oldText":"\"$TODO_FILE\" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,1]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,1],[0,1]],"newRange":[[0,1],[0,2]],"oldText":"","newText":"o","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,2],[0,2]],"newRange":[[0,2],[0,3]],"oldText":"","newText":"d","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,3],[0,3]],"newRange":[[0,3],[0,4]],"oldText":"","newText":"o","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,4],[0,4]],"newRange":[[0,4],[0,5]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,5],[0,5]],"newRange":[[0,5],[0,6]],"oldText":"","newText":"l","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,6],[0,6]],"newRange":[[0,6],[0,7]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,7],[0,7]],"newRange":[[0,7],[0,8]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,8],[0,8]],"newRange":[[0,8],[0,9]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,9],[0,9]],"newRange":[[0,9],[0,10]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,10],[0,10]],"newRange":[[0,10],[0,11]],"oldText":"","newText":"|","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,11],[0,11]],"newRange":[[0,11],[0,12]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"modifiedWhenLastPersisted":true,"deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":7,"items":[{"id":24,"softTabs":true,"displayBuffer":{"id":25,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":62,"tokenizedBuffer":{"bufferPath":"/Users/bryce/Library/Application Support/Alfred 2/Alfred.alfredpreferences/workflows/user.workflow.A2165C98-CA18-467C-A6EC-8E2C84968710/todo.py","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":28,"softTabs":true,"displayBuffer":{"id":29,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"focused":false,"deserializer":"Pane"},"activePaneId":7,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-python"],"deserializer":"Workspace"},"packageStates":{"coffee-lint":{"height":0},"command-logger":{"eventLog":{"application:new-file":{"count":1,"name":"application:new-file","lastRun":1407447623697},"core:paste":{"count":1,"name":"core:paste","lastRun":1407447624571},"core:backspace":{"count":1,"name":"core:backspace","lastRun":1407447631513},"editor:move-to-first-character-of-line":{"count":2,"name":"editor:move-to-first-character-of-line","lastRun":1407447640464},"editor:select-to-end-of-line":{"count":1,"name":"editor:select-to-end-of-line","lastRun":1407447633304},"core:copy":{"count":2,"name":"core:copy","lastRun":1407447645782},"core:select-all":{"count":1,"name":"core:select-all","lastRun":1407447645247}}},"local-history":{"localHistoryViewState":""},"fuzzy-finder":{"/Users/bryce/Library/Application Support/Alfred 2/Alfred.alfredpreferences/workflows/user.workflow.A2165C98-CA18-467C-A6EC-8E2C84968710/todo.py":1407445414566},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":25088069},"tree-view":{"directoryExpansionStates":{},"hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}