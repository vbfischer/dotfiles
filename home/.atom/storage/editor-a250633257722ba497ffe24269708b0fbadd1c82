{"mode":"editor","version":1,"windowDimensions":{"x":58,"y":22,"width":1382,"height":878},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/bryce/.oh-my-zsh","buffers":[{"text":"# Changing/making/removing directory\nsetopt auto_name_dirs\nsetopt auto_pushd\nsetopt pushd_ignore_dups\nsetopt pushdminus\n\nalias ..='cd ..'\nalias cd..='cd ..'\nalias cd...='cd ../..'\nalias cd....='cd ../../..'\nalias cd.....='cd ../../../..'\nalias cd/='cd /'\n\nalias 1='cd -'\nalias 2='cd -2'\nalias 3='cd -3'\nalias 4='cd -4'\nalias 5='cd -5'\nalias 6='cd -6'\nalias 7='cd -7'\nalias 8='cd -8'\nalias 9='cd -9'\n\ncd () {\n  if   [[ \"x$*\" == \"x...\" ]]; then\n    cd ../..\n  elif [[ \"x$*\" == \"x....\" ]]; then\n    cd ../../..\n  elif [[ \"x$*\" == \"x.....\" ]]; then\n    cd ../../../..\n  elif [[ \"x$*\" == \"x......\" ]]; then\n    cd ../../../../..\n  elif [ -d ~/.autoenv ]; then\n    source ~/.autoenv/activate.sh\n    autoenv_cd \"$@\"\n  else\n    builtin cd \"$@\"\n  fi\n}\n\nalias md='mkdir -p'\nalias rd=rmdir\nalias d='dirs -v | head -10'\n","markers":{"markers":{"1":{"id":1,"range":[[7,18],[7,18]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":902,"autoscroll":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.oh-my-zsh/lib/directories.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"5363f440af929cf42ad4815e236781bbcb7c430e","deserializer":"TextBuffer"},{"text":"## Bazaar integration\n## Just works with the GIT integration just add $(bzr_prompt_info) to the PROMPT\nfunction bzr_prompt_info() {\n\tBZR_CB=`bzr nick 2> /dev/null | grep -v \"ERROR\" | cut -d \":\" -f2 | awk -F / '{print \"bzr::\"$1}'`\n\tif [ -n \"$BZR_CB\" ]; then\n\t\tBZR_DIRTY=\"\"\n\t\t[[ -n `bzr status` ]] && BZR_DIRTY=\" %{$fg[red]%} * %{$fg[green]%}\"\n\t\techo \"$ZSH_THEME_SCM_PROMPT_PREFIX$BZR_CB$BZR_DIRTY$ZSH_THEME_GIT_PROMPT_SUFFIX\"\n\tfi\n}","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":926},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.oh-my-zsh/lib/bzr.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"be356e2454de04a952c5444d675b7df9ca14e164","deserializer":"TextBuffer"},{"text":"# fixme - the load process here seems a bit bizarre\n\nunsetopt menu_complete   # do not autoselect the first completion entry\nunsetopt flowcontrol\nsetopt auto_menu         # show completion menu on succesive tab press\nsetopt complete_in_word\nsetopt always_to_end\n\nWORDCHARS=''\n\nzmodload -i zsh/complist\n\n## case-insensitive (all),partial-word and then substring completion\nif [ \"x$CASE_SENSITIVE\" = \"xtrue\" ]; then\n  zstyle ':completion:*' matcher-list 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'\n  unset CASE_SENSITIVE\nelse\n  zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'\nfi\n\nzstyle ':completion:*' list-colors ''\n\n# should this be in keybindings?\nbindkey -M menuselect '^o' accept-and-infer-next-history\n\nzstyle ':completion:*:*:*:*:*' menu select\nzstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'\nzstyle ':completion:*:*:*:*:processes' command \"ps -u `whoami` -o pid,user,comm -w -w\"\n\n# disable named-directories autocompletion\nzstyle ':completion:*:cd:*' tag-order local-directories directory-stack path-directories\ncdpath=(.)\n\n# Use caching so that commands like apt and dpkg complete are useable\nzstyle ':completion::complete:*' use-cache 1\nzstyle ':completion::complete:*' cache-path $ZSH/cache/\n\n# Don't complete uninteresting users\nzstyle ':completion:*:*:*:users' ignored-patterns \\\n        adm amanda apache at avahi avahi-autoipd beaglidx bin cacti canna \\\n        clamav daemon dbus distcache dnsmasq dovecot fax ftp games gdm \\\n        gkrellmd gopher hacluster haldaemon halt hsqldb ident junkbust kdm \\\n        ldap lp mail mailman mailnull man messagebus  mldonkey mysql nagios \\\n        named netdump news nfsnobody nobody nscd ntp nut nx obsrun openvpn \\\n        operator pcap polkitd postfix postgres privoxy pulse pvm quagga radvd \\\n        rpc rpcuser rpm rtkit scard shutdown squid sshd statd svn sync tftp \\\n        usbmux uucp vcsa wwwrun xfs '_*'\n\n# ... unless we really want to.\nzstyle '*' single-ignored show\n\nif [ \"x$COMPLETION_WAITING_DOTS\" = \"xtrue\" ]; then\n  expand-or-complete-with-dots() {\n    echo -n \"\\e[31m......\\e[0m\"\n    zle expand-or-complete\n    zle redisplay\n  }\n  zle -N expand-or-complete-with-dots\n  bindkey \"^I\" expand-or-complete-with-dots\nfi\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":930},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.oh-my-zsh/lib/completion.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"9a8f85b3d7e38ab8b3f62ea4830656670f02c993","deserializer":"TextBuffer"},{"text":"if [[ \"$ENABLE_CORRECTION\" == \"true\" ]]; then\n  alias ebuild='nocorrect ebuild'\n  alias gist='nocorrect gist'\n  alias heroku='nocorrect heroku'\n  alias hpodder='nocorrect hpodder'\n  alias man='nocorrect man'\n  alias mkdir='nocorrect mkdir'\n  alias mv='nocorrect mv'\n  alias mysql='nocorrect mysql'\n  alias sudo='nocorrect sudo'\n\n  setopt correct_all\nfi\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":934},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.oh-my-zsh/lib/correction.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"f335b863a009d0da5020ccb481930d1b5add9398","deserializer":"TextBuffer"},{"text":"function zsh_stats() {\n  fc -l 1 | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] \" \" CMD[a]/count*100 \"% \" a;}' | grep -v \"./\" | column -c3 -s \" \" -t | sort -nr | nl |  head -n20\n}\n\nfunction uninstall_oh_my_zsh() {\n  /usr/bin/env ZSH=$ZSH /bin/sh $ZSH/tools/uninstall.sh\n}\n\nfunction upgrade_oh_my_zsh() {\n  /usr/bin/env ZSH=$ZSH /bin/sh $ZSH/tools/upgrade.sh\n}\n\nfunction take() {\n  mkdir -p $1\n  cd $1\n}\n\n#\n# Get the value of an alias.\n#\n# Arguments:\n#    1. alias - The alias to get its value from\n# STDOUT:\n#    The value of alias $1 (if it has one).\n# Return value:\n#    0 if the alias was found,\n#    1 if it does not exist\n#\nfunction alias_value() {\n    alias \"$1\" | sed \"s/^$1='\\(.*\\)'$/\\1/\"\n    test $(alias \"$1\")\n}\n\n#\n# Try to get the value of an alias,\n# otherwise return the input.\n#\n# Arguments:\n#    1. alias - The alias to get its value from\n# STDOUT:\n#    The value of alias $1, or $1 if there is no alias $1.\n# Return value:\n#    Always 0\n#\nfunction try_alias_value() {\n    alias_value \"$1\" || echo \"$1\"\n}\n\n#\n# Set variable \"$1\" to default value \"$2\" if \"$1\" is not yet defined.\n#\n# Arguments:\n#    1. name - The variable to set\n#    2. val  - The default value \n# Return value:\n#    0 if the variable exists, 3 if it was set\n#\nfunction default() {\n    test `typeset +m \"$1\"` && return 0\n    typeset -g \"$1\"=\"$2\"   && return 3\n}\n\n#\n# Set enviroment variable \"$1\" to default value \"$2\" if \"$1\" is not yet defined.\n#\n# Arguments:\n#    1. name - The env variable to set\n#    2. val  - The default value \n# Return value:\n#    0 if the env variable exists, 3 if it was set\n#\nfunction env_default() {\n    env | grep -q \"^$1=\" && return 0 \n    export \"$1=$2\"       && return 3\n}\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":938},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.oh-my-zsh/lib/functions.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"a270cb231f54d17e7d346585f1b86865e23fa299","deserializer":"TextBuffer"},{"text":"# get the name of the branch we are on\nfunction git_prompt_info() {\n  if [[ \"$(command git config --get oh-my-zsh.hide-status 2>/dev/null)\" != \"1\" ]]; then\n    ref=$(command git symbolic-ref HEAD 2> /dev/null) || \\\n    ref=$(command git rev-parse --short HEAD 2> /dev/null) || return 0\n    echo \"$ZSH_THEME_GIT_PROMPT_PREFIX${ref#refs/heads/}$(parse_git_dirty)$ZSH_THEME_GIT_PROMPT_SUFFIX\"\n  fi\n}\n\n\n# Checks if working tree is dirty\nparse_git_dirty() {\n  local SUBMODULE_SYNTAX=''\n  local GIT_STATUS=''\n  local CLEAN_MESSAGE='nothing to commit (working directory clean)'\n  if [[ \"$(command git config --get oh-my-zsh.hide-status)\" != \"1\" ]]; then\n    if [[ $POST_1_7_2_GIT -gt 0 ]]; then\n          SUBMODULE_SYNTAX=\"--ignore-submodules=dirty\"\n    fi\n    if [[ \"$DISABLE_UNTRACKED_FILES_DIRTY\" == \"true\" ]]; then\n        GIT_STATUS=$(command git status -s ${SUBMODULE_SYNTAX} -uno 2> /dev/null | tail -n1)\n    else\n        GIT_STATUS=$(command git status -s ${SUBMODULE_SYNTAX} 2> /dev/null | tail -n1)\n    fi\n    if [[ -n $GIT_STATUS ]]; then\n      echo \"$ZSH_THEME_GIT_PROMPT_DIRTY\"\n    else\n      echo \"$ZSH_THEME_GIT_PROMPT_CLEAN\"\n    fi\n  else\n    echo \"$ZSH_THEME_GIT_PROMPT_CLEAN\"\n  fi\n}\n\n# get the difference between the local and remote branches\ngit_remote_status() {\n    remote=${$(command git rev-parse --verify ${hook_com[branch]}@{upstream} --symbolic-full-name 2>/dev/null)/refs\\/remotes\\/}\n    if [[ -n ${remote} ]] ; then\n        ahead=$(command git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l)\n        behind=$(command git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l)\n\n        if [ $ahead -eq 0 ] && [ $behind -gt 0 ]\n        then\n            echo \"$ZSH_THEME_GIT_PROMPT_BEHIND_REMOTE\"\n        elif [ $ahead -gt 0 ] && [ $behind -eq 0 ]\n        then\n            echo \"$ZSH_THEME_GIT_PROMPT_AHEAD_REMOTE\"\n        elif [ $ahead -gt 0 ] && [ $behind -gt 0 ]\n        then\n            echo \"$ZSH_THEME_GIT_PROMPT_DIVERGED_REMOTE\"\n        fi\n    fi\n}\n\n# Checks if there are commits ahead from remote\nfunction git_prompt_ahead() {\n  if $(echo \"$(command git log @{upstream}..HEAD 2> /dev/null)\" | grep '^commit' &> /dev/null); then\n    echo \"$ZSH_THEME_GIT_PROMPT_AHEAD\"\n  fi\n}\n\n# Gets the number of commits ahead from remote\nfunction git_commits_ahead() {\n  if $(echo \"$(command git log @{upstream}..HEAD 2> /dev/null)\" | grep '^commit' &> /dev/null); then\n    COMMITS=$(command git log @{upstream}..HEAD | grep '^commit' | wc -l | tr -d ' ')\n    echo \"$ZSH_THEME_GIT_COMMITS_AHEAD_PREFIX$COMMITS$ZSH_THEME_GIT_COMMITS_AHEAD_SUFFIX\"\n  fi\n}\n\n# Formats prompt string for current git commit short SHA\nfunction git_prompt_short_sha() {\n  SHA=$(command git rev-parse --short HEAD 2> /dev/null) && echo \"$ZSH_THEME_GIT_PROMPT_SHA_BEFORE$SHA$ZSH_THEME_GIT_PROMPT_SHA_AFTER\"\n}\n\n# Formats prompt string for current git commit long SHA\nfunction git_prompt_long_sha() {\n  SHA=$(command git rev-parse HEAD 2> /dev/null) && echo \"$ZSH_THEME_GIT_PROMPT_SHA_BEFORE$SHA$ZSH_THEME_GIT_PROMPT_SHA_AFTER\"\n}\n\n# Get the status of the working tree\ngit_prompt_status() {\n  INDEX=$(command git status --porcelain -b 2> /dev/null)\n  STATUS=\"\"\n  if $(echo \"$INDEX\" | grep -E '^\\?\\? ' &> /dev/null); then\n    STATUS=\"$ZSH_THEME_GIT_PROMPT_UNTRACKED$STATUS\"\n  fi\n  if $(echo \"$INDEX\" | grep '^A  ' &> /dev/null); then\n    STATUS=\"$ZSH_THEME_GIT_PROMPT_ADDED$STATUS\"\n  elif $(echo \"$INDEX\" | grep '^M  ' &> /dev/null); then\n    STATUS=\"$ZSH_THEME_GIT_PROMPT_ADDED$STATUS\"\n  fi\n  if $(echo \"$INDEX\" | grep '^ M ' &> /dev/null); then\n    STATUS=\"$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS\"\n  elif $(echo \"$INDEX\" | grep '^AM ' &> /dev/null); then\n    STATUS=\"$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS\"\n  elif $(echo \"$INDEX\" | grep '^ T ' &> /dev/null); then\n    STATUS=\"$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS\"\n  fi\n  if $(echo \"$INDEX\" | grep '^R  ' &> /dev/null); then\n    STATUS=\"$ZSH_THEME_GIT_PROMPT_RENAMED$STATUS\"\n  fi\n  if $(echo \"$INDEX\" | grep '^ D ' &> /dev/null); then\n    STATUS=\"$ZSH_THEME_GIT_PROMPT_DELETED$STATUS\"\n  elif $(echo \"$INDEX\" | grep '^D  ' &> /dev/null); then\n    STATUS=\"$ZSH_THEME_GIT_PROMPT_DELETED$STATUS\"\n  elif $(echo \"$INDEX\" | grep '^AD ' &> /dev/null); then\n    STATUS=\"$ZSH_THEME_GIT_PROMPT_DELETED$STATUS\"\n  fi\n  if $(command git rev-parse --verify refs/stash >/dev/null 2>&1); then\n    STATUS=\"$ZSH_THEME_GIT_PROMPT_STASHED$STATUS\"\n  fi\n  if $(echo \"$INDEX\" | grep '^UU ' &> /dev/null); then\n    STATUS=\"$ZSH_THEME_GIT_PROMPT_UNMERGED$STATUS\"\n  fi\n  if $(echo \"$INDEX\" | grep '^## .*ahead' &> /dev/null); then\n    STATUS=\"$ZSH_THEME_GIT_PROMPT_AHEAD$STATUS\"\n  fi\n  if $(echo \"$INDEX\" | grep '^## .*behind' &> /dev/null); then\n    STATUS=\"$ZSH_THEME_GIT_PROMPT_BEHIND$STATUS\"\n  fi\n  if $(echo \"$INDEX\" | grep '^## .*diverged' &> /dev/null); then\n    STATUS=\"$ZSH_THEME_GIT_PROMPT_DIVERGED$STATUS\"\n  fi\n  echo $STATUS\n}\n\n#compare the provided version of git to the version installed and on path\n#prints 1 if input version <= installed version\n#prints -1 otherwise\nfunction git_compare_version() {\n  local INPUT_GIT_VERSION=$1;\n  local INSTALLED_GIT_VERSION\n  INPUT_GIT_VERSION=(${(s/./)INPUT_GIT_VERSION});\n  INSTALLED_GIT_VERSION=($(command git --version 2>/dev/null));\n  INSTALLED_GIT_VERSION=(${(s/./)INSTALLED_GIT_VERSION[3]});\n\n  for i in {1..3}; do\n    if [[ $INSTALLED_GIT_VERSION[$i] -lt $INPUT_GIT_VERSION[$i] ]]; then\n      echo -1\n      return 0\n    fi\n  done\n  echo 1\n}\n\n#this is unlikely to change so make it all statically assigned\nPOST_1_7_2_GIT=$(git_compare_version \"1.7.2\")\n#clean up the namespace slightly by removing the checker function\nunset -f git_compare_version\n\n\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":942},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.oh-my-zsh/lib/git.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"44c8ffe18e096bfe7834992a7e10914ed50dcf07","deserializer":"TextBuffer"},{"text":"#\n# Color grep results\n# Examples: http://rubyurl.com/ZXv\n#\n\nGREP_OPTIONS=\"--color=auto\"\n\n# avoid VCS folders (if the necessary grep flags are available)\ngrep-flag-available() {\n    echo | grep $1 \"\" >/dev/null 2>&1\n}\nif grep-flag-available --exclude-dir=.cvs; then\n    for PATTERN in .cvs .git .hg .svn; do\n        GREP_OPTIONS+=\" --exclude-dir=$PATTERN\"\n    done\nelif grep-flag-available --exclude=.cvs; then\n    for PATTERN in .cvs .git .hg .svn; do\n        GREP_OPTIONS+=\" --exclude=$PATTERN\"\n    done\nfi\nunfunction grep-flag-available\n\nexport GREP_OPTIONS=\"$GREP_OPTIONS\"\nexport GREP_COLOR='1;32'\n","markers":{"markers":{"1":{"id":1,"range":[[18,8],[18,8]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":946,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.oh-my-zsh/lib/grep.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"02ed5a3c9d76d254d5e9b59d3e557296a622d651","deserializer":"TextBuffer"},{"text":"## Command history configuration\nif [ -z $HISTFILE ]; then\n    HISTFILE=$HOME/.zsh_history\nfi\nHISTSIZE=10000\nSAVEHIST=10000\n\nsetopt extended_history\nsetopt hist_expire_dups_first\nsetopt hist_ignore_dups # ignore duplication command history list\nsetopt hist_ignore_space\nsetopt hist_verify\nsetopt inc_append_history\nsetopt share_history # share command history data\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":950},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.oh-my-zsh/lib/history.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"9e83aa6bb0ef58817d1ccb13aaf439d184ef4679","deserializer":"TextBuffer"},{"text":"# http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html\n# http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins\n# http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Standard-Widgets\n\n# Make sure that the terminal is in application mode when zle is active, since\n# only then values from $terminfo are valid\nif (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then\n  function zle-line-init() {\n    echoti smkx\n  }\n  function zle-line-finish() {\n    echoti rmkx\n  }\n  zle -N zle-line-init\n  zle -N zle-line-finish\nfi\n\nbindkey -e                                            # Use emacs key bindings\n\nbindkey '\\ew' kill-region                             # [Esc-w] - Kill from the cursor to the mark\nbindkey -s '\\el' 'ls\\n'                               # [Esc-l] - run command: ls\nbindkey '^r' history-incremental-search-backward      # [Ctrl-r] - Search backward incrementally for a specified string. The string may begin with ^ to anchor the search to the beginning of the line.\nif [[ \"${terminfo[kpp]}\" != \"\" ]]; then\n  bindkey \"${terminfo[kpp]}\" up-line-or-history       # [PageUp] - Up a line of history\nfi\nif [[ \"${terminfo[knp]}\" != \"\" ]]; then\n  bindkey \"${terminfo[knp]}\" down-line-or-history     # [PageDown] - Down a line of history\nfi\n\nif [[ \"${terminfo[kcuu1]}\" != \"\" ]]; then\n  bindkey \"${terminfo[kcuu1]}\" up-line-or-search      # start typing + [Up-Arrow] - fuzzy find history forward\nfi\nif [[ \"${terminfo[kcud1]}\" != \"\" ]]; then\n  bindkey \"${terminfo[kcud1]}\" down-line-or-search    # start typing + [Down-Arrow] - fuzzy find history backward\nfi\n\nif [[ \"${terminfo[khome]}\" != \"\" ]]; then\n  bindkey \"${terminfo[khome]}\" beginning-of-line      # [Home] - Go to beginning of line\nfi\nif [[ \"${terminfo[kend]}\" != \"\" ]]; then\n  bindkey \"${terminfo[kend]}\"  end-of-line            # [End] - Go to end of line\nfi\n\nbindkey ' ' magic-space                               # [Space] - do history expansion\n\nbindkey '^[[1;5C' forward-word                        # [Ctrl-RightArrow] - move forward one word\nbindkey '^[[1;5D' backward-word                       # [Ctrl-LeftArrow] - move backward one word\n\nif [[ \"${terminfo[kcbt]}\" != \"\" ]]; then\n  bindkey \"${terminfo[kcbt]}\" reverse-menu-complete   # [Shift-Tab] - move through the completion menu backwards\nfi\n\nbindkey '^?' backward-delete-char                     # [Backspace] - delete backward\nif [[ \"${terminfo[kdch1]}\" != \"\" ]]; then\n  bindkey \"${terminfo[kdch1]}\" delete-char            # [Delete] - delete forward\nelse\n  bindkey \"^[[3~\" delete-char\n  bindkey \"^[3;5~\" delete-char\n  bindkey \"\\e[3~\" delete-char\nfi\n\n# Edit the current command line in $EDITOR\nautoload -U edit-command-line\nzle -N edit-command-line\nbindkey '\\C-x\\C-e' edit-command-line\n\n# consider emacs keybindings:\n\n#bindkey -e  ## emacs key bindings\n#\n#bindkey '^[[A' up-line-or-search\n#bindkey '^[[B' down-line-or-search\n#bindkey '^[^[[C' emacs-forward-word\n#bindkey '^[^[[D' emacs-backward-word\n#\n#bindkey -s '^X^Z' '%-^M'\n#bindkey '^[e' expand-cmd-path\n#bindkey '^[^I' reverse-menu-complete\n#bindkey '^X^N' accept-and-infer-next-history\n#bindkey '^W' kill-region\n#bindkey '^I' complete-word\n## Fix weird sequence that rxvt produces\n#bindkey -s '^[[Z' '\\t'\n#\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":954},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.oh-my-zsh/lib/key-bindings.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"4b2915064419264f760668abc467d5f482cb3e2a","deserializer":"TextBuffer"},{"text":"## smart urls\nautoload -U url-quote-magic\nzle -N self-insert url-quote-magic\n\n## file rename magick\nbindkey \"^[m\" copy-prev-shell-word\n\n## jobs\nsetopt long_list_jobs\n\n## pager\nexport PAGER=\"less\"\nexport LESS=\"-R\"\n\nexport LC_CTYPE=$LANG\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":958},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.oh-my-zsh/lib/misc.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"0ac4d551285478d66746c2ace0394c25e10eb839","deserializer":"TextBuffer"},{"text":"# get the node.js version\nfunction nvm_prompt_info() {\n  [ -f $HOME/.nvm/nvm.sh ] || return\n  local nvm_prompt\n  nvm_prompt=$(node -v 2>/dev/null)\n  [[ \"${nvm_prompt}x\" == \"x\" ]] && return\n  nvm_prompt=${nvm_prompt:1}\n  echo \"${ZSH_THEME_NVM_PROMPT_PREFIX}${nvm_prompt}${ZSH_THEME_NVM_PROMPT_SUFFIX}\"\n}\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":962},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.oh-my-zsh/lib/nvm.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"6b3e229810f877f94daaf7465085f216557cfe78","deserializer":"TextBuffer"},{"text":"# *_prompt_info functions for usage in your prompt\n#\n# Plugin creators, please add your *_prompt_info function to the list\n# of dummy implementations to help theme creators not receiving errors\n# without the need of implementing conditional clauses.\n#\n# See also lib/bzr.zsh, lib/git.zsh and lib/nvm.zsh for\n# git_prompt_info, bzr_prompt_info and nvm_prompt_info\n\n# Dummy implementations that return false to prevent command_not_found\n# errors with themes, that implement these functions\n# Real implementations will be used when the respective plugins are loaded\nfunction chruby_prompt_info hg_prompt_info pyenv_prompt_info \\\n  rbenv_prompt_info svn_prompt_info vi_mode_prompt_info \\\n  virtualenv_prompt_info {\n  return 1\n}\n\n# oh-my-zsh supports an rvm prompt by default\n# get the name of the rvm ruby version\nfunction rvm_prompt_info() {\n  [ -f $HOME/.rvm/bin/rvm-prompt ] || return 1\n  local rvm_prompt\n  rvm_prompt=$($HOME/.rvm/bin/rvm-prompt ${=ZSH_THEME_RVM_PROMPT_OPTIONS} 2>/dev/null)\n  [[ \"${rvm_prompt}x\" == \"x\" ]] && return 1\n  echo \"${ZSH_THEME_RVM_PROMPT_PREFIX:=(}${rvm_prompt}${ZSH_THEME_RVM_PROMPT_SUFFIX:=)}\"\n}\n\n# use this to enable users to see their ruby version, no matter which\n# version management system they use\nfunction ruby_prompt_info() {\n  echo $(rvm_prompt_info || rbenv_prompt_info || chruby_prompt_info)\n}\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":966},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.oh-my-zsh/lib/prompt_info_functions.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2a1dfe50f7b66860110e1ab3a0daacb42848be00","deserializer":"TextBuffer"},{"text":"#! /bin/zsh\n# A script to make using 256 colors in zsh less painful.\n# P.C. Shyamshankar <sykora@lucentbeing.com>\n# Copied from http://github.com/sykora/etc/blob/master/zsh/functions/spectrum/\n\ntypeset -Ag FX FG BG\n\nFX=(\n    reset     \"%{\u001b[00m%}\"\n    bold      \"%{\u001b[01m%}\" no-bold      \"%{\u001b[22m%}\"\n    italic    \"%{\u001b[03m%}\" no-italic    \"%{\u001b[23m%}\"\n    underline \"%{\u001b[04m%}\" no-underline \"%{\u001b[24m%}\"\n    blink     \"%{\u001b[05m%}\" no-blink     \"%{\u001b[25m%}\"\n    reverse   \"%{\u001b[07m%}\" no-reverse   \"%{\u001b[27m%}\"\n)\n\nfor color in {000..255}; do\n    FG[$color]=\"%{\u001b[38;5;${color}m%}\"\n    BG[$color]=\"%{\u001b[48;5;${color}m%}\"\ndone\n\n\nZSH_SPECTRUM_TEXT=${ZSH_SPECTRUM_TEXT:-Arma virumque cano Troiae qui primus ab oris}\n\n# Show all 256 colors with color number\nfunction spectrum_ls() {\n  for code in {000..255}; do\n    print -P -- \"$code: %F{$code}$ZSH_SPECTRUM_TEXT%f\"\n  done\n}\n\n# Show all 256 colors where the background is set to specific color\nfunction spectrum_bls() {\n  for code in {000..255}; do\n    print -P -- \"$BG[$code]$code: $ZSH_SPECTRUM_TEXT %{$reset_color%}\"\n  done\n}\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":970},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.oh-my-zsh/lib/spectrum.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"553de708390f3880e2be4c2e15f6d607f04bd908","deserializer":"TextBuffer"},{"text":"#usage: title short_tab_title looooooooooooooooooooooggggggg_windows_title\n#http://www.faqs.org/docs/Linux-mini/Xterm-Title.html#ss3.1\n#Fully support screen, iterm, and probably most modern xterm and rxvt\n#Limited support for Apple Terminal (Terminal can't set window or tab separately)\nfunction title {\n  if [[ \"$DISABLE_AUTO_TITLE\" == \"true\" ]] || [[ \"$EMACS\" == *term* ]]; then\n    return\n  fi\n  if [[ \"$TERM\" == screen* ]]; then\n    print -Pn \"\\ek$1:q\\e\\\\\" #set screen hardstatus, usually truncated at 20 chars\n  elif [[ \"$TERM\" == xterm* ]] || [[ $TERM == rxvt* ]] || [[ $TERM == ansi ]] || [[ \"$TERM_PROGRAM\" == \"iTerm.app\" ]]; then\n    print -Pn \"\\e]2;$2:q\\a\" #set window name\n    print -Pn \"\\e]1;$1:q\\a\" #set icon (=tab) name (will override window name on broken terminal)\n  fi\n}\n\nZSH_THEME_TERM_TAB_TITLE_IDLE=\"%15<..<%~%<<\" #15 char left truncated PWD\nZSH_THEME_TERM_TITLE_IDLE=\"%n@%m: %~\"\n\n#Appears when you have the prompt\nfunction omz_termsupport_precmd {\n  title $ZSH_THEME_TERM_TAB_TITLE_IDLE $ZSH_THEME_TERM_TITLE_IDLE\n}\n\n#Appears at the beginning of (and during) of command execution\nfunction omz_termsupport_preexec {\n  emulate -L zsh\n  setopt extended_glob\n\n  # cmd name only, or if this is sudo or ssh, the next cmd\n  local CMD=${1[(wr)^(*=*|sudo|ssh|rake|-*)]:gs/%/%%}\n  local LINE=\"${2:gs/%/%%}\"\n\n  title '$CMD' '%100>...>$LINE%<<'\n}\n\nautoload -U add-zsh-hook\nadd-zsh-hook precmd  omz_termsupport_precmd\nadd-zsh-hook preexec omz_termsupport_preexec\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":974},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.oh-my-zsh/lib/termsupport.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"8da1aa35f4a70599625505e2e274ddbe7e1abf58","deserializer":"TextBuffer"},{"text":"# ls colors\nautoload colors; colors;\nexport LSCOLORS=\"Gxfxcxdxbxegedabagacad\"\n#export LS_COLORS\n\n# Enable ls colors\nif [ \"$DISABLE_LS_COLORS\" != \"true\" ]\nthen\n  # Find the option for using colors in ls, depending on the version: Linux or BSD\n  if [[ \"$(uname -s)\" == \"NetBSD\" ]]; then\n    # On NetBSD, test if \"gls\" (GNU ls) is installed (this one supports colors); \n    # otherwise, leave ls as is, because NetBSD's ls doesn't support -G\n    gls --color -d . &>/dev/null 2>&1 && alias ls='gls --color=tty'\n  elif [[ \"$(uname -s)\" == \"OpenBSD\" ]]; then\n    # On OpenBSD, test if \"colorls\" is installed (this one supports colors);\n    # otherwise, leave ls as is, because OpenBSD's ls doesn't support -G\n    colorls -G -d . &>/dev/null 2>&1 && alias ls='colorls -G'\n  else\n    ls --color -d . &>/dev/null 2>&1 && alias ls='ls --color=tty' || alias ls='ls -G'\n  fi\nfi\n\n#setopt no_beep\nsetopt auto_cd\nsetopt multios\nsetopt cdablevarS\n\nif [[ x$WINDOW != x ]]\nthen\n    SCREEN_NO=\"%B$WINDOW%b \"\nelse\n    SCREEN_NO=\"\"\nfi\n\n# Apply theming defaults\nPS1=\"%n@%m:%~%# \"\n\n# git theming default: Variables for theming the git info prompt\nZSH_THEME_GIT_PROMPT_PREFIX=\"git:(\"         # Prefix at the very beginning of the prompt, before the branch name\nZSH_THEME_GIT_PROMPT_SUFFIX=\")\"             # At the very end of the prompt\nZSH_THEME_GIT_PROMPT_DIRTY=\"*\"              # Text to display if the branch is dirty\nZSH_THEME_GIT_PROMPT_CLEAN=\"\"               # Text to display if the branch is clean\n\n# Setup the prompt with pretty colors\nsetopt prompt_subst\n\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":978},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.oh-my-zsh/lib/theme-and-appearance.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"1843c3c3bc75f7d890e54d90064354bff25220d2","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":7,"items":[{"id":902,"softTabs":true,"displayBuffer":{"id":903,"softWrap":false,"editorWidthInChars":null,"scrollTop":401,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.oh-my-zsh/lib/directories.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":938,"softTabs":true,"displayBuffer":{"id":939,"softWrap":false,"editorWidthInChars":null,"scrollTop":1040,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.oh-my-zsh/lib/functions.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":942,"softTabs":true,"displayBuffer":{"id":943,"softWrap":false,"editorWidthInChars":null,"scrollTop":3008,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.oh-my-zsh/lib/git.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":946,"softTabs":true,"displayBuffer":{"id":947,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.oh-my-zsh/lib/grep.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":950,"softTabs":true,"displayBuffer":{"id":951,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.oh-my-zsh/lib/history.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":954,"softTabs":true,"displayBuffer":{"id":955,"softWrap":false,"editorWidthInChars":null,"scrollTop":1256,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.oh-my-zsh/lib/key-bindings.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":958,"softTabs":true,"displayBuffer":{"id":959,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.oh-my-zsh/lib/misc.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":962,"softTabs":true,"displayBuffer":{"id":963,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.oh-my-zsh/lib/nvm.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":966,"softTabs":true,"displayBuffer":{"id":967,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.oh-my-zsh/lib/prompt_info_functions.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":970,"softTabs":true,"displayBuffer":{"id":971,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.oh-my-zsh/lib/spectrum.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":974,"softTabs":true,"displayBuffer":{"id":975,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.oh-my-zsh/lib/termsupport.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":978,"softTabs":true,"displayBuffer":{"id":979,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.oh-my-zsh/lib/theme-and-appearance.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":926,"softTabs":false,"displayBuffer":{"id":927,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.oh-my-zsh/lib/bzr.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":930,"softTabs":true,"displayBuffer":{"id":931,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.oh-my-zsh/lib/completion.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":934,"softTabs":true,"displayBuffer":{"id":935,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.oh-my-zsh/lib/correction.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/bryce/.oh-my-zsh/lib/functions.zsh","focused":false,"deserializer":"Pane"},"activePaneId":7,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-shellscript"],"deserializer":"Workspace"},"packageStates":{"coffee-lint":{"height":0},"command-logger":{"eventLog":{"project-find:show":{"count":4,"name":"project-find:show","lastRun":1407597673332},"core:confirm":{"count":13,"name":"core:confirm","lastRun":1407597675138},"editor:move-to-first-character-of-line":{"count":2,"name":"editor:move-to-first-character-of-line","lastRun":1407001672128},"core:select-down":{"count":1,"name":"core:select-down","lastRun":1407001672442},"core:backspace":{"count":11,"name":"core:backspace","lastRun":1407021177424},"core:save":{"count":9,"name":"core:save","lastRun":1407021348950},"core:copy":{"count":4,"name":"core:copy","lastRun":1407021116249},"tabs:close-tab":{"count":1,"name":"tabs:close-tab","lastRun":1407001914489},"tool-panel:unfocus":{"count":1,"name":"tool-panel:unfocus","lastRun":1407002504244},"core:cancel":{"count":4,"name":"core:cancel","lastRun":1407597811485},"tabs:close-all-tabs":{"count":11,"name":"tabs:close-all-tabs","lastRun":1407017668685},"tree-view:reveal-active-file":{"count":1,"name":"tree-view:reveal-active-file","lastRun":1407017321148},"tabs:close-other-tabs":{"count":1,"name":"tabs:close-other-tabs","lastRun":1407017466210},"find-and-replace:show":{"count":2,"name":"find-and-replace:show","lastRun":1407021116587},"core:paste":{"count":4,"name":"core:paste","lastRun":1407021304379},"fancy-new-file:toggle":{"count":2,"name":"fancy-new-file:toggle","lastRun":1407021130395},"core:undo":{"count":2,"name":"core:undo","lastRun":1407021167113},"core:move-up":{"count":5,"name":"core:move-up","lastRun":1407021151074},"core:select-left":{"count":6,"name":"core:select-left","lastRun":1407021161745},"core:move-down":{"count":5,"name":"core:move-down","lastRun":1407021176487},"core:select-all":{"count":1,"name":"core:select-all","lastRun":1407021216243},"core:cut":{"count":1,"name":"core:cut","lastRun":1407021217212},"tree-view:remove":{"count":1,"name":"tree-view:remove","lastRun":1407021224514},"editor:newline":{"count":1,"name":"editor:newline","lastRun":1407021280024},"core:move-right":{"count":1,"name":"core:move-right","lastRun":1407021344918},"fuzzy-finder:toggle-file-finder":{"count":1,"name":"fuzzy-finder:toggle-file-finder","lastRun":1407597567317},"command-palette:toggle":{"count":2,"name":"command-palette:toggle","lastRun":1407597778923}}},"local-history":{"localHistoryViewState":""},"find-and-replace":{"viewState":{"findHistory":["$ZSH_CUSOMT","$ZSH_CUSOM","ZSH_CUSTOM"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}},"projectViewState":{"findHistory":["autojup","dirs "],"replaceHistory":[],"pathsHistory":[],"modelState":{"useRegex":false,"caseSensitive":false}},"resultsModelState":{"useRegex":false,"caseSensitive":false}},"fuzzy-finder":{"/Users/bryce/.oh-my-zsh/lib/directories.zsh":1407597793779,"/Users/bryce/.oh-my-zsh/lib/functions.zsh":1407598666248,"/Users/bryce/.oh-my-zsh/lib/git.zsh":1407597802616,"/Users/bryce/.oh-my-zsh/lib/grep.zsh":1407597807412,"/Users/bryce/.oh-my-zsh/lib/history.zsh":1407597812859,"/Users/bryce/.oh-my-zsh/lib/key-bindings.zsh":1407597816627,"/Users/bryce/.oh-my-zsh/lib/misc.zsh":1407597859952,"/Users/bryce/.oh-my-zsh/lib/nvm.zsh":1407597865419,"/Users/bryce/.oh-my-zsh/lib/prompt_info_functions.zsh":1407597867816,"/Users/bryce/.oh-my-zsh/lib/spectrum.zsh":1407597869456,"/Users/bryce/.oh-my-zsh/lib/termsupport.zsh":1407597870736,"/Users/bryce/.oh-my-zsh/lib/theme-and-appearance.zsh":1407597871967,"/Users/bryce/.oh-my-zsh/lib/bzr.zsh":1407597787530,"/Users/bryce/.oh-my-zsh/lib/completion.zsh":1407597790299,"/Users/bryce/.oh-my-zsh/lib/correction.zsh":1407597791187},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":71130589},"tree-view":{"directoryExpansionStates":{"custom":{},"lib":{},"log":{},"templates":{}},"selectedPath":"/Users/bryce/.oh-my-zsh/tools","hasFocus":true,"attached":true,"scrollLeft":0,"scrollTop":0,"width":376}}}