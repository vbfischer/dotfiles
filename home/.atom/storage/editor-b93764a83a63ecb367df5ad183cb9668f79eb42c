{"mode":"editor","version":1,"windowDimensions":{"x":58,"y":22,"width":1382,"height":878},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/bryce/.homesick/repos/bzdots/bzdots","buffers":[{"text":"# Sample gitconfig\n#\n\n[hub]\n        protocol = https\n[user]\n        name = Bryce Fischer\n        email = bryce@berzerker-soft.com\n\n[alias]\n        co = checkout\n        promote = !$ZSH_CUSTOM/bin/git-promote\n        wtf     = !$ZSH_CUSTOM/bin/git-wtf\n        rank-contributers = !$ZSH_CUSTOM/bin/git-rank-contributers\n        count   = !git shortlog -sn\n[color]\n        diff = auto\n        status = auto\n        branch = auto\n        ui = true\n[core]\n        excludesfile = /Users/bryce/.gitignore\n        editor = vim\n[apply]\n        whitespace = nowarn\n[mergetool]\n        keepBackup = false\n        prompt = false\n[difftool]\n        prompt = false\n[help]\n        autocorrect = 1\n[push]\n        # See `git help config` (search for push.default)\n        # for more information on different options of the below setting.\n        #\n        # Setting to git 2.0 default to surpress warning message\n        default = simple\n[difftool \"sourcetree\"]\n        cmd = /usr/local/bin/ksdiff -w \\\"$LOCAL\\\" \\\"$REMOTE\\\"\n        path =\n[mergetool \"sourcetree\"]\n        cmd = /usr/local/bin/ksdiff --merge --output \\\"$MERGED\\\" --base \\\"$BASE\\\" -- \\\"$LOCAL\\\" --snapshot \\\"$REMOTE\\\" --snapshot\n        trustExitCode = true\n[difftool \"Kaleidoscope\"]\n        cmd = ksdiff --partial-changeset --relative-path \\\"$MERGED\\\" -- \\\"$LOCAL\\\" \\\"$REMOTE\\\"\n[mergetool \"Kaleidoscope\"]\n        cmd = ksdiff --merge --output \\\"$MERGED\\\" --base \\\"$BASE\\\" -- \\\"$LOCAL\\\" --snapshot \\\"$REMOTE\\\" --snapshot\n        trustExitCode = true\n[diff]\n        tool = Kaleidoscope\n[merge]\n        tool = Kaleidoscope\n","markers":{"markers":{"1":{"id":1,"range":[[12,19],[12,42]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":30,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.homesick/repos/bzdots/home/.gitconfig","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"70b022683730d18edc54ee637297c743cff723ca","deserializer":"TextBuffer"},{"text":"#!/usr/bin/env ruby\n\nHELP = <<EOS\ngit-wtf displays the state of your repository in a readable, easy-to-scan\nformat. It's useful for getting a summary of how a branch relates to a remote\nserver, and for wrangling many topic branches.\n\ngit-wtf can show you:\n- How a branch relates to the remote repo, if it's a tracking branch.\n- How a branch relates to integration branches, if it's a feature branch.\n- How a branch relates to the feature branches, if it's an integration\n  branch.\n\ngit-wtf is best used before a git push, or between a git fetch and a git\nmerge. Be sure to set color.ui to auto or yes for maximum viewing pleasure.\nEOS\n\nKEY = <<EOS\nKEY:\n() branch only exists locally\n{} branch only exists on a remote repo\n[] branch exists locally and remotely\n\nx merge occurs both locally and remotely\n~ merge occurs only locally\n  (space) branch isn't merged in\n\n(It's possible for merges to occur remotely and not locally, of course, but\nthat's a less common case and git-wtf currently doesn't display anything\nspecial for it.)\nEOS\n\nUSAGE = <<EOS\nUsage: git wtf [branch+] [options]\n\nIf [branch] is not specified, git-wtf will use the current branch. The possible\n[options] are:\n\n  -l, --long          include author info and date for each commit\n  -a, --all           show all branches across all remote repos, not just\n                      those from origin\n  -A, --all-commits   show all commits, not just the first 5\n  -s, --short         don't show commits\n  -k, --key           show key\n  -r, --relations     show relation to features / integration branches\n      --dump-config   print out current configuration and exit\n\ngit-wtf uses some heuristics to determine which branches are integration\nbranches, and which are feature branches. (Specifically, it assumes the\nintegration branches are named \"master\", \"next\" and \"edge\".) If it guesses\nincorrectly, you will have to create a .git-wtfrc file.\n\nTo start building a configuration file, run \"git-wtf --dump-config >\n.git-wtfrc\" and edit it. The config file is a YAML file that specifies the\nintegration branches, any branches to ignore, and the max number of commits to\ndisplay when --all-commits isn't used.  git-wtf will look for a .git-wtfrc file\nstarting in the current directory, and recursively up to the root.\n\nIMPORTANT NOTE: all local branches referenced in .git-wtfrc must be prefixed\nwith heads/, e.g. \"heads/master\". Remote branches must be of the form\nremotes/<remote>/<branch>.\nEOS\n\nCOPYRIGHT = <<EOS\ngit-wtf Copyright 2008--2009 William Morgan <wmorgan at the masanjin dot nets>.\nThis program is free software: you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as published by the Free\nSoftware Foundation, either version 3 of the License, or (at your option)\nany later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\nFITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\nmore details.\n\nYou can find the GNU General Public License at: http://www.gnu.org/licenses/\nEOS\n\nrequire 'yaml'\nCONFIG_FN = \".git-wtfrc\"\n\nclass Numeric; def pluralize s; \"#{to_s} #{s}\" + (self != 1 ? \"s\" : \"\") end end\n\nif ARGV.delete(\"--help\") || ARGV.delete(\"-h\")\n  puts USAGE\n  exit\nend\n\n## poor man's trollop\n$long = ARGV.delete(\"--long\") || ARGV.delete(\"-l\")\n$short = ARGV.delete(\"--short\") || ARGV.delete(\"-s\")\n$all = ARGV.delete(\"--all\") || ARGV.delete(\"-a\")\n$all_commits = ARGV.delete(\"--all-commits\") || ARGV.delete(\"-A\")\n$dump_config = ARGV.delete(\"--dump-config\")\n$key = ARGV.delete(\"--key\") || ARGV.delete(\"-k\")\n$show_relations = ARGV.delete(\"--relations\") || ARGV.delete(\"-r\")\nARGV.each { |a| abort \"Error: unknown argument #{a}.\" if a =~ /^--/ }\n\n## search up the path for a file\ndef find_file fn\n  while true\n    return fn if File.exist? fn\n    fn2 = File.join(\"..\", fn)\n    return nil if File.expand_path(fn2) == File.expand_path(fn)\n    fn = fn2\n  end\nend\n\nwant_color = `git config color.wtf`\nwant_color = `git config color.ui` if want_color.empty?\n$color = case want_color.chomp\n  when \"true\"; true\n  when \"auto\"; $stdout.tty?\nend\n\ndef red s; $color ? \"\\033[31m#{s}\\033[0m\" : s end\ndef green s; $color ? \"\\033[32m#{s}\\033[0m\" : s end\ndef yellow s; $color ? \"\\033[33m#{s}\\033[0m\" : s end\ndef cyan s; $color ? \"\\033[36m#{s}\\033[0m\" : s end\ndef grey s; $color ? \"\\033[1;30m#{s}\\033[0m\" : s end\ndef purple s; $color ? \"\\033[35m#{s}\\033[0m\" : s end\n\n## the set of commits in 'to' that aren't in 'from'.\n## if empty, 'to' has been merged into 'from'.\ndef commits_between from, to\n  if $long\n    `git log --pretty=format:\"- %s [#{yellow \"%h\"}] (#{purple \"%ae\"}; %ar)\" #{from}..#{to}`\n  else\n    `git log --pretty=format:\"- %s [#{yellow \"%h\"}]\" #{from}..#{to}`\n  end.split(/[\\r\\n]+/)\nend\n\ndef show_commits commits, prefix=\"    \"\n  if commits.empty?\n    puts \"#{prefix} none\"\n  else\n    max = $all_commits ? commits.size : $config[\"max_commits\"]\n    max -= 1 if max == commits.size - 1 # never show \"and 1 more\"\n    commits[0 ... max].each { |c| puts \"#{prefix}#{c}\" }\n    puts grey(\"#{prefix}... and #{commits.size - max} more (use -A to see all).\") if commits.size > max\n  end\nend\n\ndef ahead_behind_string ahead, behind\n  [ahead.empty? ? nil : \"#{ahead.size.pluralize 'commit'} ahead\",\n   behind.empty? ? nil : \"#{behind.size.pluralize 'commit'} behind\"].\n   compact.join(\"; \")\nend\n\ndef widget merged_in, remote_only=false, local_only=false, local_only_merge=false\n  left, right = case\n    when remote_only; %w({ })\n    when local_only; %w{( )}\n    else %w([ ])\n  end\n  middle = case\n    when merged_in && local_only_merge; green(\"~\")\n    when merged_in; green(\"x\")\n    else \" \"\n  end\n  print left, middle, right\nend\n\ndef show b\n  have_both = b[:local_branch] && b[:remote_branch]\n\n  pushc, pullc, oosync = if have_both\n    [x = commits_between(b[:remote_branch], b[:local_branch]),\n     y = commits_between(b[:local_branch], b[:remote_branch]),\n     !x.empty? && !y.empty?]\n  end\n\n  if b[:local_branch]\n    puts \"Local branch: \" + green(b[:local_branch].sub(/^heads\\//, \"\"))\n\n    if have_both\n      if pushc.empty?\n        puts \"#{widget true} in sync with remote\"\n      else\n        action = oosync ? \"push after rebase / merge\" : \"push\"\n        puts \"#{widget false} NOT in sync with remote (you should #{action})\"\n        show_commits pushc unless $short\n      end\n    end\n  end\n\n  if b[:remote_branch]\n    puts \"Remote branch: #{cyan b[:remote_branch]} (#{b[:remote_url]})\"\n\n    if have_both\n      if pullc.empty?\n        puts \"#{widget true} in sync with local\"\n      else\n        action = pushc.empty? ? \"merge\" : \"rebase / merge\"\n        puts \"#{widget false} NOT in sync with local (you should #{action})\"\n        show_commits pullc unless $short\n      end\n    end\n  end\n\n  puts \"\\n#{red \"WARNING\"}: local and remote branches have diverged. A merge will occur unless you rebase.\" if oosync\nend\n\ndef show_relations b, all_branches\n  ibs, fbs = all_branches.partition { |name, br| $config[\"integration-branches\"].include?(br[:local_branch]) || $config[\"integration-branches\"].include?(br[:remote_branch]) }\n  if $config[\"integration-branches\"].include? b[:local_branch]\n    puts \"\\nFeature branches:\" unless fbs.empty?\n    fbs.each do |name, br|\n      next if $config[\"ignore\"].member?(br[:local_branch]) || $config[\"ignore\"].member?(br[:remote_branch])\n      next if br[:ignore]\n      local_only = br[:remote_branch].nil?\n      remote_only = br[:local_branch].nil?\n      name = if local_only\n        purple br[:name]\n      elsif remote_only\n        cyan br[:name]\n      else\n        green br[:name]\n      end\n\n      ## for remote_only branches, we'll compute wrt the remote branch head. otherwise, we'll\n      ## use the local branch head.\n      head = remote_only ? br[:remote_branch] : br[:local_branch]\n\n      remote_ahead = b[:remote_branch] ? commits_between(b[:remote_branch], head) : []\n      local_ahead = b[:local_branch] ? commits_between(b[:local_branch], head) : []\n\n      if local_ahead.empty? && remote_ahead.empty?\n        puts \"#{widget true, remote_only, local_only} #{name} #{local_only ? \"(local-only) \" : \"\"}is merged in\"\n      elsif local_ahead.empty?\n        puts \"#{widget true, remote_only, local_only, true} #{name} merged in (only locally)\"\n      else\n        behind = commits_between head, (br[:local_branch] || br[:remote_branch])\n        ahead = remote_only ? remote_ahead : local_ahead\n        puts \"#{widget false, remote_only, local_only} #{name} #{local_only ? \"(local-only) \" : \"\"}is NOT merged in (#{ahead_behind_string ahead, behind})\"\n        show_commits ahead unless $short\n      end\n    end\n  else\n    puts \"\\nIntegration branches:\" unless ibs.empty? # unlikely\n    ibs.sort_by { |v, br| v }.each do |v, br|\n      next if $config[\"ignore\"].member?(br[:local_branch]) || $config[\"ignore\"].member?(br[:remote_branch])\n      next if br[:ignore]\n      local_only = br[:remote_branch].nil?\n      remote_only = br[:local_branch].nil?\n      name = remote_only ? cyan(br[:name]) : green(br[:name])\n\n      ahead = commits_between v, (b[:local_branch] || b[:remote_branch])\n      if ahead.empty?\n        puts \"#{widget true, local_only} merged into #{name}\"\n      else\n        #behind = commits_between b[:local_branch], v\n        puts \"#{widget false, local_only} NOT merged into #{name} (#{ahead.size.pluralize 'commit'} ahead)\"\n        show_commits ahead unless $short\n      end\n    end\n  end\nend\n\n#### EXECUTION STARTS HERE ####\n\n## find config file and load it\n$config = { \"integration-branches\" => %w(heads/master heads/next heads/edge), \"ignore\" => [], \"max_commits\" => 5 }.merge begin\n  fn = find_file CONFIG_FN\n  if fn && (h = YAML::load_file(fn)) # yaml turns empty files into false\n    h[\"integration-branches\"] ||= h[\"versions\"] # support old nomenclature\n    h\n  else\n    {}\n  end\nend\n\nif $dump_config\n  puts $config.to_yaml\n  exit\nend\n\n## first, index registered remotes\nremotes = `git config --get-regexp ^remote\\.\\*\\.url`.split(/[\\r\\n]+/).inject({}) do |hash, l|\n  l =~ /^remote\\.(.+?)\\.url (.+)$/ or next hash\n  hash[$1] ||= $2\n  hash\nend\n\n## next, index followed branches\nbranches = `git config --get-regexp ^branch\\.`.split(/[\\r\\n]+/).inject({}) do |hash, l|\n  case l\n  when /branch\\.(.*?)\\.remote (.+)/\n    name, remote = $1, $2\n\n    hash[name] ||= {}\n    hash[name].merge! :remote => remote, :remote_url => remotes[remote]\n  when /branch\\.(.*?)\\.merge ((refs\\/)?heads\\/)?(.+)/\n    name, remote_branch = $1, $4\n    hash[name] ||= {}\n    hash[name].merge! :remote_mergepoint => remote_branch\n  end\n  hash\nend\n\n## finally, index all branches\nremote_branches = {}\n`git show-ref`.split(/[\\r\\n]+/).each do |l|\n  sha1, ref = l.chomp.split \" refs/\"\n\n  if ref =~ /^heads\\/(.+)$/ # local branch\n    name = $1\n    next if name == \"HEAD\"\n    branches[name] ||= {}\n    branches[name].merge! :name => name, :local_branch => ref\n  elsif ref =~ /^remotes\\/(.+?)\\/(.+)$/ # remote branch\n    remote, name = $1, $2\n    remote_branches[\"#{remote}/#{name}\"] = true\n    next if name == \"HEAD\"\n    ignore = !($all || remote == \"origin\")\n\n    branch = name\n    if branches[name] && branches[name][:remote] == remote\n      # nothing\n    else\n      name = \"#{remote}/#{branch}\"\n    end\n\n    branches[name] ||= {}\n    branches[name].merge! :name => name, :remote => remote, :remote_branch => \"#{remote}/#{branch}\", :remote_url => remotes[remote], :ignore => ignore\n  end\nend\n\n## assemble remotes\nbranches.each do |k, b|\n  next unless b[:remote] && b[:remote_mergepoint]\n  b[:remote_branch] = if b[:remote] == \".\"\n    b[:remote_mergepoint]\n  else\n    t = \"#{b[:remote]}/#{b[:remote_mergepoint]}\"\n    remote_branches[t] && t # only if it's still alive\n  end\nend\n\nshow_dirty = ARGV.empty?\ntargets = if ARGV.empty?\n  [`git symbolic-ref HEAD`.chomp.sub(/^refs\\/heads\\//, \"\")]\nelse\n  ARGV.map { |x| x.sub(/^heads\\//, \"\") }\nend.map { |t| branches[t] or abort \"Error: can't find branch #{t.inspect}.\" }\n\ntargets.each do |t|\n  show t\n  show_relations t, branches if $show_relations || t[:remote_branch].nil?\nend\n\nmodified = show_dirty && `git ls-files -m` != \"\"\nuncommitted = show_dirty &&  `git diff-index --cached HEAD` != \"\"\n\nif $key\n  puts\n  puts KEY\nend\n\nputs if modified || uncommitted\nputs \"#{red \"NOTE\"}: working directory contains modified files.\" if modified\nputs \"#{red \"NOTE\"}: staging area contains staged but uncommitted files.\" if uncommitted\n\n# the end!\n","markers":{"markers":{"1":{"id":1,"range":[[5,23],[5,23]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":40,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.homesick/repos/bzdots/custom/bin/git-wtf","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"4804293b4324aa8ae7bf66c468b879f16997bf43","deserializer":"TextBuffer"},{"text":"export PATH=\"$HOME/bin:/usr/local/bin:/usr/local/sbin:$PATH\"\nexport PATH=\"$PATH:$HOME/.rbenv/bin:$HOME/.rbenv/shims\"\nexport PATH=\"$PATH:$HOME/opt/Sencha/Cmd/4.0.0.203\"\nexport PATH=\"$PATH:/Users/bryce/Development/tools/apache-maven-3.1.1/bin\" \n","markers":{"markers":{"1":{"id":1,"range":[[3,74],[3,74]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":51,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[4,0],[4,0]],"newRange":[[4,0],[4,1]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[4,1],[4,1]],"newRange":[[4,1],[4,2]],"oldText":"","newText":"c","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[4,2],[4,2]],"newRange":[[4,2],[4,3]],"oldText":"","newText":"h","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[4,3],[4,3]],"newRange":[[4,3],[4,4]],"oldText":"","newText":"o","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[4,4],[4,4]],"newRange":[[4,4],[4,5]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[4,5],[4,5]],"newRange":[[4,5],[4,6]],"oldText":"","newText":"$","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[4,6],[4,6]],"newRange":[[4,6],[4,7]],"oldText":"","newText":"P","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[4,7],[4,7]],"newRange":[[4,7],[4,8]],"oldText":"","newText":"A","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[4,8],[4,8]],"newRange":[[4,8],[4,9]],"oldText":"","newText":"T","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[4,9],[4,9]],"newRange":[[4,9],[4,10]],"oldText":"","newText":"H","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[4,10],[4,10]],"newRange":[[4,10],[5,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[5,0],[5,0]]},"newParams":{"range":[[4,10],[4,10]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[4,0],[4,10]],"newRange":[[4,0],[4,0]],"oldText":"echo $PATH","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[4,0],[4,0]]},"newParams":{"range":[[3,73],[4,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[3,73],[4,0]],"newRange":[[3,73],[3,73]],"oldText":"\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[3,73],[3,73]],"newRange":[[3,73],[3,74]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.homesick/repos/bzdots/custom/paths.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"0b3b200ba2f90067981a835b6f7cd8627d32be8b","deserializer":"TextBuffer"},{"text":"# Path to your oh-my-zsh installation.\nexport ZSH=$HOME/.oh-my-zsh\n\n# Set name of the theme to load.\n# Look in ~/.oh-my-zsh/themes/\n# Optionally, if you set this to \"random\", it'll load a random theme each\n# time that oh-my-zsh is loaded.\n# ZSH_THEME=\"robbyrussell\"\nZSH_THEME=\"jtriley\"\n\n# Uncomment the following line to use case-sensitive completion.\n# CASE_SENSITIVE=\"true\"\n\n# Uncomment the following line to disable bi-weekly auto-update checks.\n# DISABLE_AUTO_UPDATE=\"true\"\n\n# Uncomment the following line to change how often to auto-update (in days).\n# export UPDATE_ZSH_DAYS=13\n\n# Uncomment the following line to disable colors in ls.\n# DISABLE_LS_COLORS=\"true\"\n\n# Uncomment the following line to disable auto-setting terminal title.\n# DISABLE_AUTO_TITLE=\"true\"\n\n# Uncomment the following line to enable command auto-correction.\n# ENABLE_CORRECTION=\"true\"\n\n# Uncomment the following line to display red dots whilst waiting for completion.\n# COMPLETION_WAITING_DOTS=\"true\"\n\n# Uncomment the following line if you want to disable marking untracked files\n# under VCS as dirty. This makes repository status check for large repositories\n# much, much faster.\n# DISABLE_UNTRACKED_FILES_DIRTY=\"true\"\n\n# Uncomment the following line if you want to change the command execution time\n# stamp shown in the history command output.\n# The optional three formats: \"mm/dd/yyyy\"|\"dd.mm.yyyy\"|\"yyyy-mm-dd\"\n# HIST_STAMPS=\"mm/dd/yyyy\"\n\n# Would you like to use another custom folder than $ZSH/custom?\nZSH_CUSTOM=$HOME/.homesick/repos/bzdots/custom\n\n# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)\n# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/\n# Example format: plugins=(rails git textmate ruby lighthouse)\n# Add wisely, as too many plugins slow down shell startup.\nplugins=(git atom autojump bower brew bwana cloudapp coffee copydir copyfile dirhistory git-prompt mvn node osx pj rbenv screen svn)\n\nsource $ZSH/oh-my-zsh.sh\n\n# User configuration\n\nexport PATH=\"$PATH:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/git/bin:$ZSH_CUSTOM/bin\"\n# export MANPATH=\"/usr/local/man:$MANPATH\"\n\n# You may need to manually set your language environment\n# export LANG=en_US.UTF-8\n\n# Preferred editor for local and remote sessions\nif [[ -n $SSH_CONNECTION ]]; then\n  export EDITOR='vim'\nelse\n  export EDITOR='atom'\nfi\n\n# Compilation flags\n# export ARCHFLAGS=\"-arch x86_64\"\n\n# ssh\n# export SSH_KEY_PATH=\"~/.ssh/dsa_id\"\n\n# Set personal aliases, overriding those provided by oh-my-zsh libs,\n# plugins, and themes. Aliases can be placed here, though oh-my-zsh\n# users are encouraged to define aliases within the ZSH_CUSTOM folder.\n# For a full list of active aliases, run `alias`.\n#\n# Example aliases\n# alias zshconfig=\"mate ~/.zshrc\"\n# alias ohmyzsh=\"mate ~/.oh-my-zsh\"\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":63},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.homesick/repos/bzdots/home/.zshrc","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"4f226facacfece59ab8c1815ba5fca5eab9d29a6","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":7,"items":[{"id":51,"softTabs":true,"displayBuffer":{"id":52,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.homesick/repos/bzdots/custom/paths.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":63,"softTabs":true,"displayBuffer":{"id":64,"softWrap":false,"editorWidthInChars":null,"scrollTop":279,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.homesick/repos/bzdots/home/.zshrc","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":30,"softTabs":true,"displayBuffer":{"id":31,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.homesick/repos/bzdots/home/.gitconfig","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":40,"softTabs":true,"displayBuffer":{"id":41,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.homesick/repos/bzdots/custom/bin/git-wtf","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/bryce/.homesick/repos/bzdots/custom/paths.zsh","focused":true,"deserializer":"Pane"},"activePaneId":7,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-shellscript","language-git","language-ruby"],"deserializer":"Workspace"},"packageStates":{"coffee-lint":{"height":0},"command-logger":{"eventLog":{"editor:move-to-first-character-of-line":{"count":2,"name":"editor:move-to-first-character-of-line","lastRun":1407021634222},"core:select-down":{"count":5,"name":"core:select-down","lastRun":1407001245348},"editor:toggle-line-comments":{"count":1,"name":"editor:toggle-line-comments","lastRun":1407001247061},"core:save":{"count":35,"name":"core:save","lastRun":1407022020410},"core:backspace":{"count":17,"name":"core:backspace","lastRun":1407021427829},"core:select-all":{"count":1,"name":"core:select-all","lastRun":1407002061015},"core:move-left":{"count":3,"name":"core:move-left","lastRun":1407002136860},"fancy-new-file:toggle":{"count":5,"name":"fancy-new-file:toggle","lastRun":1407021229041},"core:confirm":{"count":5,"name":"core:confirm","lastRun":1407021980594},"core:copy":{"count":3,"name":"core:copy","lastRun":1407021638193},"core:paste":{"count":5,"name":"core:paste","lastRun":1407022018479},"editor:move-to-end-of-screen-line":{"count":2,"name":"editor:move-to-end-of-screen-line","lastRun":1407021638530},"core:undo":{"count":1,"name":"core:undo","lastRun":1407021329549},"editor:select-to-first-character-of-line":{"count":1,"name":"editor:select-to-first-character-of-line","lastRun":1407021388232},"editor:indent":{"count":1,"name":"editor:indent","lastRun":1407021391790},"editor:select-to-end-of-line":{"count":1,"name":"editor:select-to-end-of-line","lastRun":1407021636851},"editor:newline":{"count":1,"name":"editor:newline","lastRun":1407021639069},"tree-view:add-file":{"count":1,"name":"tree-view:add-file","lastRun":1407021976892}}},"local-history":{"localHistoryViewState":""},"fuzzy-finder":{"/Users/bryce/.homesick/repos/bzdots/custom/paths.zsh":1407022030956,"/Users/bryce/.homesick/repos/bzdots/home/.zshrc":1407021985763,"/Users/bryce/.homesick/repos/bzdots/home/.gitconfig":1407018240587,"/Users/bryce/.homesick/repos/bzdots/custom/bin/git-wtf":1407018188701},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":20987948},"tree-view":{"directoryExpansionStates":{"home":{}},"selectedPath":"/Users/bryce/.homesick/repos/bzdots/custom","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}