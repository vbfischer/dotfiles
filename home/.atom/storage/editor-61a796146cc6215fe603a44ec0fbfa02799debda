{"mode":"editor","version":1,"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{"/Users/bryce/.homesick/repos/bzdots/custom/bin/svnweek":"source.js","/Users/bryce/.homesick/repos/bzdots/home/.todo/config":"source.shell","/Users/bryce/.homesick/repos/bzdots/custom/bin/txml":"source.js"}},"project":{"path":"/Users/bryce/.homesick/repos/bzdots","buffers":[{"text":"#!/usr/bin/env ruby\n\nHELP = <<EOS\ngit-wtf displays the state of your repository in a readable, easy-to-scan\nformat. It's useful for getting a summary of how a branch relates to a remote\nserver, and for wrangling many topic branches.\n\ngit-wtf can show you:\n- How a branch relates to the remote repo, if it's a tracking branch.\n- How a branch relates to integration branches, if it's a feature branch.\n- How a branch relates to the feature branches, if it's an integration\n  branch.\n\ngit-wtf is best used before a git push, or between a git fetch and a git\nmerge. Be sure to set color.ui to auto or yes for maximum viewing pleasure.\nEOS\n\nKEY = <<EOS\nKEY:\n() branch only exists locally\n{} branch only exists on a remote repo\n[] branch exists locally and remotely\n\nx merge occurs both locally and remotely\n~ merge occurs only locally\n  (space) branch isn't merged in\n\n(It's possible for merges to occur remotely and not locally, of course, but\nthat's a less common case and git-wtf currently doesn't display anything\nspecial for it.)\nEOS\n\nUSAGE = <<EOS\nUsage: git wtf [branch+] [options]\n\nIf [branch] is not specified, git-wtf will use the current branch. The possible\n[options] are:\n\n  -l, --long          include author info and date for each commit\n  -a, --all           show all branches across all remote repos, not just\n                      those from origin\n  -A, --all-commits   show all commits, not just the first 5\n  -s, --short         don't show commits\n  -k, --key           show key\n  -r, --relations     show relation to features / integration branches\n      --dump-config   print out current configuration and exit\n\ngit-wtf uses some heuristics to determine which branches are integration\nbranches, and which are feature branches. (Specifically, it assumes the\nintegration branches are named \"master\", \"next\" and \"edge\".) If it guesses\nincorrectly, you will have to create a .git-wtfrc file.\n\nTo start building a configuration file, run \"git-wtf --dump-config >\n.git-wtfrc\" and edit it. The config file is a YAML file that specifies the\nintegration branches, any branches to ignore, and the max number of commits to\ndisplay when --all-commits isn't used.  git-wtf will look for a .git-wtfrc file\nstarting in the current directory, and recursively up to the root.\n\nIMPORTANT NOTE: all local branches referenced in .git-wtfrc must be prefixed\nwith heads/, e.g. \"heads/master\". Remote branches must be of the form\nremotes/<remote>/<branch>.\nEOS\n\nCOPYRIGHT = <<EOS\ngit-wtf Copyright 2008--2009 William Morgan <wmorgan at the masanjin dot nets>.\nThis program is free software: you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as published by the Free\nSoftware Foundation, either version 3 of the License, or (at your option)\nany later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\nFITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\nmore details.\n\nYou can find the GNU General Public License at: http://www.gnu.org/licenses/\nEOS\n\nrequire 'yaml'\nCONFIG_FN = \".git-wtfrc\"\n\nclass Numeric; def pluralize s; \"#{to_s} #{s}\" + (self != 1 ? \"s\" : \"\") end end\n\nif ARGV.delete(\"--help\") || ARGV.delete(\"-h\")\n  puts USAGE\n  exit\nend\n\n## poor man's trollop\n$long = ARGV.delete(\"--long\") || ARGV.delete(\"-l\")\n$short = ARGV.delete(\"--short\") || ARGV.delete(\"-s\")\n$all = ARGV.delete(\"--all\") || ARGV.delete(\"-a\")\n$all_commits = ARGV.delete(\"--all-commits\") || ARGV.delete(\"-A\")\n$dump_config = ARGV.delete(\"--dump-config\")\n$key = ARGV.delete(\"--key\") || ARGV.delete(\"-k\")\n$show_relations = ARGV.delete(\"--relations\") || ARGV.delete(\"-r\")\nARGV.each { |a| abort \"Error: unknown argument #{a}.\" if a =~ /^--/ }\n\n## search up the path for a file\ndef find_file fn\n  while true\n    return fn if File.exist? fn\n    fn2 = File.join(\"..\", fn)\n    return nil if File.expand_path(fn2) == File.expand_path(fn)\n    fn = fn2\n  end\nend\n\nwant_color = `git config color.wtf`\nwant_color = `git config color.ui` if want_color.empty?\n$color = case want_color.chomp\n  when \"true\"; true\n  when \"auto\"; $stdout.tty?\nend\n\ndef red s; $color ? \"\\033[31m#{s}\\033[0m\" : s end\ndef green s; $color ? \"\\033[32m#{s}\\033[0m\" : s end\ndef yellow s; $color ? \"\\033[33m#{s}\\033[0m\" : s end\ndef cyan s; $color ? \"\\033[36m#{s}\\033[0m\" : s end\ndef grey s; $color ? \"\\033[1;30m#{s}\\033[0m\" : s end\ndef purple s; $color ? \"\\033[35m#{s}\\033[0m\" : s end\n\n## the set of commits in 'to' that aren't in 'from'.\n## if empty, 'to' has been merged into 'from'.\ndef commits_between from, to\n  if $long\n    `git log --pretty=format:\"- %s [#{yellow \"%h\"}] (#{purple \"%ae\"}; %ar)\" #{from}..#{to}`\n  else\n    `git log --pretty=format:\"- %s [#{yellow \"%h\"}]\" #{from}..#{to}`\n  end.split(/[\\r\\n]+/)\nend\n\ndef show_commits commits, prefix=\"    \"\n  if commits.empty?\n    puts \"#{prefix} none\"\n  else\n    max = $all_commits ? commits.size : $config[\"max_commits\"]\n    max -= 1 if max == commits.size - 1 # never show \"and 1 more\"\n    commits[0 ... max].each { |c| puts \"#{prefix}#{c}\" }\n    puts grey(\"#{prefix}... and #{commits.size - max} more (use -A to see all).\") if commits.size > max\n  end\nend\n\ndef ahead_behind_string ahead, behind\n  [ahead.empty? ? nil : \"#{ahead.size.pluralize 'commit'} ahead\",\n   behind.empty? ? nil : \"#{behind.size.pluralize 'commit'} behind\"].\n   compact.join(\"; \")\nend\n\ndef widget merged_in, remote_only=false, local_only=false, local_only_merge=false\n  left, right = case\n    when remote_only; %w({ })\n    when local_only; %w{( )}\n    else %w([ ])\n  end\n  middle = case\n    when merged_in && local_only_merge; green(\"~\")\n    when merged_in; green(\"x\")\n    else \" \"\n  end\n  print left, middle, right\nend\n\ndef show b\n  have_both = b[:local_branch] && b[:remote_branch]\n\n  pushc, pullc, oosync = if have_both\n    [x = commits_between(b[:remote_branch], b[:local_branch]),\n     y = commits_between(b[:local_branch], b[:remote_branch]),\n     !x.empty? && !y.empty?]\n  end\n\n  if b[:local_branch]\n    puts \"Local branch: \" + green(b[:local_branch].sub(/^heads\\//, \"\"))\n\n    if have_both\n      if pushc.empty?\n        puts \"#{widget true} in sync with remote\"\n      else\n        action = oosync ? \"push after rebase / merge\" : \"push\"\n        puts \"#{widget false} NOT in sync with remote (you should #{action})\"\n        show_commits pushc unless $short\n      end\n    end\n  end\n\n  if b[:remote_branch]\n    puts \"Remote branch: #{cyan b[:remote_branch]} (#{b[:remote_url]})\"\n\n    if have_both\n      if pullc.empty?\n        puts \"#{widget true} in sync with local\"\n      else\n        action = pushc.empty? ? \"merge\" : \"rebase / merge\"\n        puts \"#{widget false} NOT in sync with local (you should #{action})\"\n        show_commits pullc unless $short\n      end\n    end\n  end\n\n  puts \"\\n#{red \"WARNING\"}: local and remote branches have diverged. A merge will occur unless you rebase.\" if oosync\nend\n\ndef show_relations b, all_branches\n  ibs, fbs = all_branches.partition { |name, br| $config[\"integration-branches\"].include?(br[:local_branch]) || $config[\"integration-branches\"].include?(br[:remote_branch]) }\n  if $config[\"integration-branches\"].include? b[:local_branch]\n    puts \"\\nFeature branches:\" unless fbs.empty?\n    fbs.each do |name, br|\n      next if $config[\"ignore\"].member?(br[:local_branch]) || $config[\"ignore\"].member?(br[:remote_branch])\n      next if br[:ignore]\n      local_only = br[:remote_branch].nil?\n      remote_only = br[:local_branch].nil?\n      name = if local_only\n        purple br[:name]\n      elsif remote_only\n        cyan br[:name]\n      else\n        green br[:name]\n      end\n\n      ## for remote_only branches, we'll compute wrt the remote branch head. otherwise, we'll\n      ## use the local branch head.\n      head = remote_only ? br[:remote_branch] : br[:local_branch]\n\n      remote_ahead = b[:remote_branch] ? commits_between(b[:remote_branch], head) : []\n      local_ahead = b[:local_branch] ? commits_between(b[:local_branch], head) : []\n\n      if local_ahead.empty? && remote_ahead.empty?\n        puts \"#{widget true, remote_only, local_only} #{name} #{local_only ? \"(local-only) \" : \"\"}is merged in\"\n      elsif local_ahead.empty?\n        puts \"#{widget true, remote_only, local_only, true} #{name} merged in (only locally)\"\n      else\n        behind = commits_between head, (br[:local_branch] || br[:remote_branch])\n        ahead = remote_only ? remote_ahead : local_ahead\n        puts \"#{widget false, remote_only, local_only} #{name} #{local_only ? \"(local-only) \" : \"\"}is NOT merged in (#{ahead_behind_string ahead, behind})\"\n        show_commits ahead unless $short\n      end\n    end\n  else\n    puts \"\\nIntegration branches:\" unless ibs.empty? # unlikely\n    ibs.sort_by { |v, br| v }.each do |v, br|\n      next if $config[\"ignore\"].member?(br[:local_branch]) || $config[\"ignore\"].member?(br[:remote_branch])\n      next if br[:ignore]\n      local_only = br[:remote_branch].nil?\n      remote_only = br[:local_branch].nil?\n      name = remote_only ? cyan(br[:name]) : green(br[:name])\n\n      ahead = commits_between v, (b[:local_branch] || b[:remote_branch])\n      if ahead.empty?\n        puts \"#{widget true, local_only} merged into #{name}\"\n      else\n        #behind = commits_between b[:local_branch], v\n        puts \"#{widget false, local_only} NOT merged into #{name} (#{ahead.size.pluralize 'commit'} ahead)\"\n        show_commits ahead unless $short\n      end\n    end\n  end\nend\n\n#### EXECUTION STARTS HERE ####\n\n## find config file and load it\n$config = { \"integration-branches\" => %w(heads/master heads/next heads/edge), \"ignore\" => [], \"max_commits\" => 5 }.merge begin\n  fn = find_file CONFIG_FN\n  if fn && (h = YAML::load_file(fn)) # yaml turns empty files into false\n    h[\"integration-branches\"] ||= h[\"versions\"] # support old nomenclature\n    h\n  else\n    {}\n  end\nend\n\nif $dump_config\n  puts $config.to_yaml\n  exit\nend\n\n## first, index registered remotes\nremotes = `git config --get-regexp ^remote\\.\\*\\.url`.split(/[\\r\\n]+/).inject({}) do |hash, l|\n  l =~ /^remote\\.(.+?)\\.url (.+)$/ or next hash\n  hash[$1] ||= $2\n  hash\nend\n\n## next, index followed branches\nbranches = `git config --get-regexp ^branch\\.`.split(/[\\r\\n]+/).inject({}) do |hash, l|\n  case l\n  when /branch\\.(.*?)\\.remote (.+)/\n    name, remote = $1, $2\n\n    hash[name] ||= {}\n    hash[name].merge! :remote => remote, :remote_url => remotes[remote]\n  when /branch\\.(.*?)\\.merge ((refs\\/)?heads\\/)?(.+)/\n    name, remote_branch = $1, $4\n    hash[name] ||= {}\n    hash[name].merge! :remote_mergepoint => remote_branch\n  end\n  hash\nend\n\n## finally, index all branches\nremote_branches = {}\n`git show-ref`.split(/[\\r\\n]+/).each do |l|\n  sha1, ref = l.chomp.split \" refs/\"\n\n  if ref =~ /^heads\\/(.+)$/ # local branch\n    name = $1\n    next if name == \"HEAD\"\n    branches[name] ||= {}\n    branches[name].merge! :name => name, :local_branch => ref\n  elsif ref =~ /^remotes\\/(.+?)\\/(.+)$/ # remote branch\n    remote, name = $1, $2\n    remote_branches[\"#{remote}/#{name}\"] = true\n    next if name == \"HEAD\"\n    ignore = !($all || remote == \"origin\")\n\n    branch = name\n    if branches[name] && branches[name][:remote] == remote\n      # nothing\n    else\n      name = \"#{remote}/#{branch}\"\n    end\n\n    branches[name] ||= {}\n    branches[name].merge! :name => name, :remote => remote, :remote_branch => \"#{remote}/#{branch}\", :remote_url => remotes[remote], :ignore => ignore\n  end\nend\n\n## assemble remotes\nbranches.each do |k, b|\n  next unless b[:remote] && b[:remote_mergepoint]\n  b[:remote_branch] = if b[:remote] == \".\"\n    b[:remote_mergepoint]\n  else\n    t = \"#{b[:remote]}/#{b[:remote_mergepoint]}\"\n    remote_branches[t] && t # only if it's still alive\n  end\nend\n\nshow_dirty = ARGV.empty?\ntargets = if ARGV.empty?\n  [`git symbolic-ref HEAD`.chomp.sub(/^refs\\/heads\\//, \"\")]\nelse\n  ARGV.map { |x| x.sub(/^heads\\//, \"\") }\nend.map { |t| branches[t] or abort \"Error: can't find branch #{t.inspect}.\" }\n\ntargets.each do |t|\n  show t\n  show_relations t, branches if $show_relations || t[:remote_branch].nil?\nend\n\nmodified = show_dirty && `git ls-files -m` != \"\"\nuncommitted = show_dirty &&  `git diff-index --cached HEAD` != \"\"\n\nif $key\n  puts\n  puts KEY\nend\n\nputs if modified || uncommitted\nputs \"#{red \"NOTE\"}: working directory contains modified files.\" if modified\nputs \"#{red \"NOTE\"}: staging area contains staged but uncommitted files.\" if uncommitted\n\n# the end!\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":65,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.homesick/repos/bzdots/custom/bin/git-wtf","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"4804293b4324aa8ae7bf66c468b879f16997bf43","deserializer":"TextBuffer"},{"text":"#!/bin/sh\n#\n# Stage all unstaged.\n\ngit add -A\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":69,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.homesick/repos/bzdots/custom/bin/git-all","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"92212bc957b2fb439918ed18df815d73d65d53ce","deserializer":"TextBuffer"},{"text":"#!/usr/bin/env ruby\n#\n# cloudapp\n# Zach Holman / @holman\n#\n# Uploads a file from the command line to CloudApp, drops it into your\n# clipboard (on a Mac, at least).\n#\n# Example:\n#\n#   cloudapp drunk-blake.png\n#\n# This requires Aaron Russell's cloudapp_api gem:\n#\n#   gem install cloudapp_api\n#\n# Requires you set your CloudApp credentials in ~/.cloudapp as a simple file of:\n#\n#   email\n#   password\n\nrequire 'rubygems'\n\n['json', 'cloudapp_api'].each do |gem|\n  begin\n    require gem\n  rescue LoadError\n    puts \"You need to install #{gem}: gem install #{gem}\"\n    exit!(1)\n  end\nend\n\nconfig_file = \"#{ENV['HOME']}/.local/.cloudapp\"\nunless File.exist?(config_file)\n  puts \"You need to type your email and password (one per line) into \"+\n       \"`~/.cloudapp`\"\n  exit!(1)\nend\n\nemail,password = File.read(config_file).split(\"\\n\")\n\nif ARGV[0].nil?\n   puts \"You need to specify a file to upload.\"\n   exit!(1)\nend\n\nurls = []\nARGV.each do |x|\n  CloudApp.authenticate(email,password)\n  puts \"Attempting to upload #{x}\"\n  url = CloudApp::Item.create(:upload, {:file => x}).url\n\n  # Say it for good measure.\n  puts \"Uploaded #{x} to #{url}\"\n\n  # Get the embed link.\n  url = \"#{url}/#{ARGV[0].split('/').last}\"\n  urls << url\nend\n\n# Copy it to your (Mac's) clipboard.\n`echo '#{urls.join(',')}' | tr -d \"\\n\" | pbcopy`\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":73,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.homesick/repos/bzdots/custom/bin/cloudapp","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"20b20e9a4ac13ddbe29aac39348b77edb313d413","deserializer":"TextBuffer"},{"text":"#!/usr/bin/env bash\n# 2009-2011 Paul Mansfield\n# License: GPL, http://www.gnu.org/copyleft/gpl.html\n\n# Stop Verbose lines, thanks to Mark Harrison\nTODOTXT_VERBOSE=0\n# Allow control of wrapping if using as simplepv action\nNOWRAP=0\n\n# Check how we are being run\nHOWRUN=$(basename $0)\n\n# move arguments one to left, therefore eating action name\naction=$1\nshift\n\n# If being run as simplepv then turn off all colours and\n# wrap at 40 characters\n# Useful for display outside of terminal\nif [ $HOWRUN = \"simplepv\" ] ; then\n    TODOTXT_PLAIN=1\n    PRI_X=$NONE\n    PRI_A=$NONE\n    PRI_B=$NONE\n    PRI_C=$NONE\n    DEFAULT=$NONE\n    COLOR_DONE=$NONE\n    # Check if we want to wrap text or not\n    if [ \"$1\" = \"--nowrap\" ]; then\n        NOWRAP=1\n        shift\n    fi\n    # If we have fmt then use it to wrap long lines\n    $(file /usr/bin/fmt > /dev/null 2>&1)\n    FMT=$?\n    # Set final filter\n    if [ \"$NOWRAP\" -eq 1 ] ; then\n        TODOTXT_FINAL_FILTER=\"$TODOTXT_FINAL_FILTER \"\n    elif [ $FMT -eq 0 ] ; then\n        TODOTXT_FINAL_FILTER=\"$TODOTXT_FINAL_FILTER | fmt -t -w 40\"\n    fi\nfi\n\n# Stop filter now and run in a controlled manner after the _list function is run\nTODOTXT_DISABLE_FILTER=1\n\n[ \"$action\" = \"useage\" ] && {\n    echo \"    $(basename $0) [TERM...]\"\n    echo \"      Show todo items containing TERM, grouped by project, and displayed in\"\n    echo \"      priority order. If no TERM provided, displays entire todo.txt.\"\n    echo \"\"\n    exit\n}\n\n# Show projects in alphabetical order and todo items in priority order\necho \"=====  Projects  =====\"\necho \"\"\n\n# Find all projects and sort\nPROJECTS=$(grep -o '[^ ]*+[^ ]\\+' \"$TODO_FILE\" | grep '^+' | sort -u | sed 's/^+//g' )\n\n# For each project show header and the list of todo items\nfor project in $PROJECTS ; do\n    # Use core _list function, does numbering and colouring for us\n    PROJECT_LIST=$(_list \"$TODO_FILE\" \"+$project\\b\" \"$@\" | sed 's/\\ *+[a-zA-Z0-9._\\-]*\\ */ /g')\n    if [[ -n \"${PROJECT_LIST}\" ]]; then\n        echo  \"---  $project  ---\"\n        echo  \"${PROJECT_LIST}\" | eval $TODOTXT_FINAL_FILTER\n        # If run as simplepv don't add newlines\n        if [ $HOWRUN != \"simplepv\" ] ; then\n            echo  \"\"\n        fi\n    fi\ndone\n\n# Show todo items not associated to a project\nPROJECT_LIST=$(_list \"$TODO_FILE\" \"$@\" | grep -v \"+[[:alnum:]]*\" )\nif [[ -n \"${PROJECT_LIST}\" ]]; then\n    echo \"--- Not in projects ---\"\n    echo \"${PROJECT_LIST}\" | eval $TODOTXT_FINAL_FILTER\nfi\n","markers":{"markers":{"1":{"id":1,"range":[[18,27],[18,27]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":127,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.homesick/repos/bzdots/home/.todo.actions.d/projectsview","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"3590e8cb796bb45851956aef1a2a94d2e2476c12","deserializer":"TextBuffer"},{"text":"alias todo=todo.sh\nalias week='date +%V'\n\nalias db=\"cd ~/Dropbox\"\nalias dl=\"cd ~/Downloads\"\nalias dt=\"cd ~/Desktop\"\nalias p=\"cd ~/projects\"\n\n# List only directories\nalias lsd=\"ls -lF ${colorflag} | grep --color=never '^d'\"\n\n# Get week number\nalias week='date +%V'\n\n# Stopwatch\nalias timer='echo \"Timer started. Stop with Ctrl-D.\" && date && time cat && date'\n\n# Enable aliases to be sudo’ed\nalias sudo='sudo '\n\n# Get OS X Software Updates, and update installed Ruby gems, Homebrew, npm, and their installed packages\nalias update='sudo softwareupdate -i -a; brew update; brew upgrade; brew cleanup; npm update npm -g; npm update -g; sudo gem update --system; sudo gem update'\n\n# IP addresses\nalias ip=\"dig +short myip.opendns.com @resolver1.opendns.com\"\nalias localip=\"ipconfig getifaddr en0\"\nalias ips=\"ifconfig -a | grep -o 'inet6\\? \\(addr:\\)\\?\\s\\?\\(\\(\\([0-9]\\+\\.\\)\\{3\\}[0-9]\\+\\)\\|[a-fA-F0-9:]\\+\\)' | awk '{ sub(/inet6? (addr:)? ?/, \\\"\\\"); print }'\"\n\n# View HTTP traffic\nalias sniff=\"sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'\"\nalias httpdump=\"sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \\\"Host\\: .*|GET \\/.*\\\"\"\n\n# Canonical hex dump; some systems have this symlinked\ncommand -v hd > /dev/null || alias hd=\"hexdump -C\"\n\n# OS X has no `md5sum`, so use `md5` as a fallback\ncommand -v md5sum > /dev/null || alias md5sum=\"md5\"\n\n# OS X has no `sha1sum`, so use `shasum` as a fallback\ncommand -v sha1sum > /dev/null || alias sha1sum=\"shasum\"\n\n# JavaScriptCore REPL\njscbin=\"/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc\";\n[ -e \"${jscbin}\" ] && alias jsc=\"${jscbin}\";\nunset jscbin;\n\n# Trim new lines and copy to clipboard\nalias c=\"tr -d '\\n' | pbcopy\"\n\n# Recursively delete `.DS_Store` files\nalias cleanup=\"find . -type f -name '*.DS_Store' -ls -delete\"\n\n# Empty the Trash on all mounted volumes and the main HDD\n# Also, clear Apple’s System Logs to improve shell startup speed\nalias emptytrash=\"sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl\"\n\n# Show/hide hidden files in Finder\nalias show=\"defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder\"\nalias hide=\"defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder\"\n\n# Hide/show all desktop icons (useful when presenting)\nalias hidedesktop=\"defaults write com.apple.finder CreateDesktop -bool false && killall Finder\"\nalias showdesktop=\"defaults write com.apple.finder CreateDesktop -bool true && killall Finder\"\n\n# URL-encode strings\nalias urlencode='python -c \"import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);\"'\n\n# Merge PDF files\n# Usage: `mergepdf -o output.pdf input{1,2,3}.pdf`\nalias mergepdf='/System/Library/Automator/Combine\\ PDF\\ Pages.action/Contents/Resources/join.py'\n\n# Disable Spotlight\nalias spotoff=\"sudo mdutil -a -i off\"\n# Enable Spotlight\nalias spoton=\"sudo mdutil -a -i on\"\n\n# PlistBuddy alias, because sometimes `defaults` just doesn’t cut it\nalias plistbuddy=\"/usr/libexec/PlistBuddy\"\n\n# Ring the terminal bell, and put a badge on Terminal.app’s Dock icon\n# (useful when executing time-consuming commands)\nalias badge=\"tput bel\"\n\n# Intuitive map function\n# For example, to list all directories that contain a certain file:\n# find . -name .gitattributes | map dirname\nalias map=\"xargs -n1\"\n\n# One of @janmoesen’s ProTip™s\nfor method in GET HEAD POST PUT DELETE TRACE OPTIONS; do\n\talias \"$method\"=\"lwp-request -m '$method'\"\ndone\n\n\n# Make Grunt print stack traces by default\ncommand -v grunt > /dev/null && alias grunt=\"grunt --stack\"\n\n# Stuff I never really use but cannot delete either because of http://xkcd.com/530/\nalias stfu=\"osascript -e 'set volume output muted true'\"\nalias pumpitup=\"osascript -e 'set volume 7'\"\n\n# Kill all the tabs in Chrome to free up memory\n# [C] explained: http://www.commandlinefu.com/commands/view/402/exclude-grep-from-your-grepped-output-of-ps-alias-included-in-description\nalias chromekill=\"ps ux | grep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill\"\n\n# Lock the screen (when going AFK)\nalias afk=\"/System/Library/CoreServices/Menu\\ Extras/User.menu/Contents/Resources/CGSession -suspend\"\n\n# Reload the shell (i.e. invoke as a login shell)\nalias reload=\"exec $SHELL -l\"\n","markers":{"markers":{"1":{"id":1,"range":[[50,15],[50,60]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":215,"goalBufferRange":null,"preserveFolds":true,"autoscroll":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.homesick/repos/bzdots/custom/aliases.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"8f4e70facbe190df831e40a97b2f9ad58434381f","deserializer":"TextBuffer"},{"text":"# Path to your oh-my-zsh installation.\nexport ZSH=$HOME/.oh-my-zsh\n\n# Set name of the theme to load.\n# Look in ~/.oh-my-zsh/themes/\n# Optionally, if you set this to \"random\", it'll load a random theme each\n# time that oh-my-zsh is loaded.\n# ZSH_THEME=\"robbyrussell\"\nZSH_THEME=\"jtriley\"\n\n# Uncomment the following line to use case-sensitive completion.\n# CASE_SENSITIVE=\"true\"\n\n# Uncomment the following line to disable bi-weekly auto-update checks.\n# DISABLE_AUTO_UPDATE=\"true\"\n\n# Uncomment the following line to change how often to auto-update (in days).\n# export UPDATE_ZSH_DAYS=13\n\n# Uncomment the following line to disable colors in ls.\n# DISABLE_LS_COLORS=\"true\"\n\n# Uncomment the following line to disable auto-setting terminal title.\n# DISABLE_AUTO_TITLE=\"true\"\n\n# Uncomment the following line to enable command auto-correction.\n# ENABLE_CORRECTION=\"true\"\n\n# Uncomment the following line to display red dots whilst waiting for completion.\n# COMPLETION_WAITING_DOTS=\"true\"\n\n# Uncomment the following line if you want to disable marking untracked files\n# under VCS as dirty. This makes repository status check for large repositories\n# much, much faster.\n# DISABLE_UNTRACKED_FILES_DIRTY=\"true\"\n\n# Uncomment the following line if you want to change the command execution time\n# stamp shown in the history command output.\n# The optional three formats: \"mm/dd/yyyy\"|\"dd.mm.yyyy\"|\"yyyy-mm-dd\"\n# HIST_STAMPS=\"mm/dd/yyyy\"\n\n# Would you like to use another custom folder than $ZSH/custom?\nZSH_CUSTOM=$HOME/.homesick/repos/bzdots/custom\n\n# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)\n# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/\n# Example format: plugins=(rails git textmate ruby lighthouse)\n# Add wisely, as too many plugins slow down shell startup.\nplugins=(git atom autojump bower brew bwana cloudapp coffee copydir copyfile dirhistory git-prompt mvn node osx pj rbenv screen svn)\n\nsource $ZSH/oh-my-zsh.sh\n\n# User configuration\n\nexport PATH=\"$PATH:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/git/bin:$ZSH_CUSTOM/bin\"\n# export MANPATH=\"/usr/local/man:$MANPATH\"\n\n# You may need to manually set your language environment\n# export LANG=en_US.UTF-8\n\n# Preferred editor for local and remote sessions\nif [[ -n $SSH_CONNECTION ]]; then\n  export EDITOR='vim'\nelse\n  export EDITOR='atom'\nfi\n\n# Compilation flags\n# export ARCHFLAGS=\"-arch x86_64\"\n\n# ssh\n# export SSH_KEY_PATH=\"~/.ssh/dsa_id\"\n\n# Set personal aliases, overriding those provided by oh-my-zsh libs,\n# plugins, and themes. Aliases can be placed here, though oh-my-zsh\n# users are encouraged to define aliases within the ZSH_CUSTOM folder.\n# For a full list of active aliases, run `alias`.\n#\n# Example aliases\n# alias zshconfig=\"mate ~/.zshrc\"\n# alias ohmyzsh=\"mate ~/.oh-my-zsh\"\n","markers":{"markers":{"1":{"id":1,"range":[[55,21],[55,21]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":235,"autoscroll":true,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.homesick/repos/bzdots/home/.zshrc","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"4f226facacfece59ab8c1815ba5fca5eab9d29a6","deserializer":"TextBuffer"},{"text":"# Simple calculator\nfunction calc() {\n\tlocal result=\"\";\n\tresult=\"$(printf \"scale=10;$*\\n\" | bc --mathlib | tr -d '\\\\\\n')\";\n\t#                       └─ default (when `--mathlib` is used) is 20\n\t#\n\tif [[ \"$result\" == *.* ]]; then\n\t\t# improve the output for decimal numbers\n\t\tprintf \"$result\" |\n\t\tsed -e 's/^\\./0./'        `# add \"0\" for cases like \".5\"` \\\n\t\t    -e 's/^-\\./-0./'      `# add \"0\" for cases like \"-.5\"`\\\n\t\t    -e 's/0*$//;s/\\.$//';  # remove trailing zeros\n\telse\n\t\tprintf \"$result\";\n\tfi;\n\tprintf \"\\n\";\n}\n\n# Create a new directory and enter it\nfunction mkd() {\n\tmkdir -p \"$@\" && cd \"$@\";\n}\n\n# Change working directory to the top-most Finder window location\nfunction cdf() { # short for `cdfinder`\n\tcd \"$(osascript -e 'tell app \"Finder\" to POSIX path of (insertion location as alias)')\";\n}\n\n# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression\nfunction targz() {\n\tlocal tmpFile=\"${@%/}.tar\";\n\ttar -cvf \"${tmpFile}\" --exclude=\".DS_Store\" \"${@}\" || return 1;\n\n\tsize=$(\n\t\tstat -f\"%z\" \"${tmpFile}\" 2> /dev/null; # OS X `stat`\n\t\tstat -c\"%s\" \"${tmpFile}\" 2> /dev/null # GNU `stat`\n\t);\n\n\tlocal cmd=\"\";\n\tif (( size < 52428800 )) && hash zopfli 2> /dev/null; then\n\t\t# the .tar file is smaller than 50 MB and Zopfli is available; use it\n\t\tcmd=\"zopfli\";\n\telse\n\t\tif hash pigz 2> /dev/null; then\n\t\t\tcmd=\"pigz\";\n\t\telse\n\t\t\tcmd=\"gzip\";\n\t\tfi;\n\tfi;\n\n\techo \"Compressing .tar using \\`${cmd}\\`…\";\n\t\"${cmd}\" -v \"${tmpFile}\" || return 1;\n\t[ -f \"${tmpFile}\" ] && rm \"${tmpFile}\";\n\techo \"${tmpFile}.gz created successfully.\";\n}\n\n# Determine size of a file or total size of a directory\nfunction fs() {\n\tif du -b /dev/null > /dev/null 2>&1; then\n\t\tlocal arg=-sbh;\n\telse\n\t\tlocal arg=-sh;\n\tfi\n\tif [[ -n \"$@\" ]]; then\n\t\tdu $arg -- \"$@\";\n\telse\n\t\tdu $arg .[^.]* *;\n\tfi;\n}\n\n# Use Git’s colored diff when available\nhash git &>/dev/null;\nif [ $? -eq 0 ]; then\n\tfunction diff() {\n\t\tgit diff --no-index --color-words \"$@\";\n\t}\nfi;\n\n# Create a data URL from a file\nfunction dataurl() {\n\tlocal mimeType=$(file -b --mime-type \"$1\");\n\tif [[ $mimeType == text/* ]]; then\n\t\tmimeType=\"${mimeType};charset=utf-8\";\n\tfi\n\techo \"data:${mimeType};base64,$(openssl base64 -in \"$1\" | tr -d '\\n')\";\n}\n\n# Create a git.io short URL\nfunction gitio() {\n\tif [ -z \"${1}\" -o -z \"${2}\" ]; then\n\t\techo \"Usage: \\`gitio slug url\\`\";\n\t\treturn 1;\n\tfi;\n\tcurl -i http://git.io/ -F \"url=${2}\" -F \"code=${1}\";\n}\n\n# Start an HTTP server from a directory, optionally specifying the port\nfunction server() {\n\tlocal port=\"${1:-8000}\";\n\tsleep 1 && open \"http://localhost:${port}/\" &\n\t# Set the default Content-Type to `text/plain` instead of `application/octet-stream`\n\t# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)\n\tpython -c $'import SimpleHTTPServer;\\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\\nmap[\"\"] = \"text/plain\";\\nfor key, value in map.items():\\n\\tmap[key] = value + \";charset=UTF-8\";\\nSimpleHTTPServer.test();' \"$port\";\n}\n\n# Start a PHP server from a directory, optionally specifying the port\n# (Requires PHP 5.4.0+.)\nfunction phpserver() {\n\tlocal port=\"${1:-4000}\";\n\tlocal ip=$(ipconfig getifaddr en1);\n\tsleep 1 && open \"http://${ip}:${port}/\" &\n\tphp -S \"${ip}:${port}\";\n}\n\n# Compare original and gzipped file size\nfunction gz() {\n\tlocal origsize=$(wc -c < \"$1\");\n\tlocal gzipsize=$(gzip -c \"$1\" | wc -c);\n\tlocal ratio=$(echo \"$gzipsize * 100 / $origsize\" | bc -l);\n\tprintf \"orig: %d bytes\\n\" \"$origsize\";\n\tprintf \"gzip: %d bytes (%2.2f%%)\\n\" \"$gzipsize\" \"$ratio\";\n}\n\n# Syntax-highlight JSON strings or files\n# Usage: `json '{\"foo\":42}'` or `echo '{\"foo\":42}' | json`\nfunction json() {\n\tif [ -t 0 ]; then # argument\n\t\tpython -mjson.tool <<< \"$*\" | pygmentize -l javascript;\n\telse # pipe\n\t\tpython -mjson.tool | pygmentize -l javascript;\n\tfi;\n}\n\n# Run `dig` and display the most useful info\nfunction digga() {\n\tdig +nocmd \"$1\" any +multiline +noall +answer;\n}\n\n# UTF-8-encode a string of Unicode symbols\nfunction escape() {\n\tprintf \"\\\\\\x%s\" $(printf \"$@\" | xxd -p -c1 -u);\n\t# print a newline unless we’re piping the output to another program\n\tif [ -t 1 ]; then\n\t\techo \"\"; # newline\n\tfi;\n}\n\n# Decode \\x{ABCD}-style Unicode escape sequences\nfunction unidecode() {\n\tperl -e \"binmode(STDOUT, ':utf8'); print \\\"$@\\\"\";\n\t# print a newline unless we’re piping the output to another program\n\tif [ -t 1 ]; then\n\t\techo \"\"; # newline\n\tfi;\n}\n\n# Get a character’s Unicode code point\nfunction codepoint() {\n\tperl -e \"use utf8; print sprintf('U+%04X', ord(\\\"$@\\\"))\";\n\t# print a newline unless we’re piping the output to another program\n\tif [ -t 1 ]; then\n\t\techo \"\"; # newline\n\tfi;\n}\n\n# Show all the names (CNs and SANs) listed in the SSL certificate\n# for a given domain\nfunction getcertnames() {\n\tif [ -z \"${1}\" ]; then\n\t\techo \"ERROR: No domain specified.\";\n\t\treturn 1;\n\tfi;\n\n\tlocal domain=\"${1}\";\n\techo \"Testing ${domain}…\";\n\techo \"\"; # newline\n\n\tlocal tmp=$(echo -e \"GET / HTTP/1.0\\nEOT\" \\\n\t\t| openssl s_client -connect \"${domain}:443\" 2>&1);\n\n\tif [[ \"${tmp}\" = *\"-----BEGIN CERTIFICATE-----\"* ]]; then\n\t\tlocal certText=$(echo \"${tmp}\" \\\n\t\t\t| openssl x509 -text -certopt \"no_header, no_serial, no_version, \\\n\t\t\tno_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux\");\n\t\t\techo \"Common Name:\";\n\t\t\techo \"\"; # newline\n\t\t\techo \"${certText}\" | grep \"Subject:\" | sed -e \"s/^.*CN=//\";\n\t\t\techo \"\"; # newline\n\t\t\techo \"Subject Alternative Name(s):\";\n\t\t\techo \"\"; # newline\n\t\t\techo \"${certText}\" | grep -A 1 \"Subject Alternative Name:\" \\\n\t\t\t\t| sed -e \"2s/DNS://g\" -e \"s/ //g\" | tr \",\" \"\\n\" | tail -n +2;\n\t\t\treturn 0;\n\telse\n\t\techo \"ERROR: Certificate not found.\";\n\t\treturn 1;\n\tfi;\n}\n\n# `s` with no arguments opens the current directory in Sublime Text, otherwise\n# opens the given location\nfunction s() {\n\tif [ $# -eq 0 ]; then\n\t\tsubl .;\n\telse\n\t\tsubl \"$@\";\n\tfi;\n}\n\n# `a` with no arguments opens the current directory in Atom Editor, otherwise\n# opens the given location\nfunction a() {\n\tif [ $# -eq 0 ]; then\n\t\tatom .;\n\telse\n\t\tatom \"$@\";\n\tfi;\n}\n\n# `v` with no arguments opens the current directory in Vim, otherwise opens the\n# given location\nfunction v() {\n\tif [ $# -eq 0 ]; then\n\t\tvim .;\n\telse\n\t\tvim \"$@\";\n\tfi;\n}\n\n# `o` with no arguments opens the current directory, otherwise opens the given\n# location\nfunction o() {\n\tif [ $# -eq 0 ]; then\n\t\topen .;\n\telse\n\t\topen \"$@\";\n\tfi;\n}\n\n# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring\n# the `.git` directory, listing directories first. The output gets piped into\n# `less` with options to preserve color and line numbers, unless the output is\n# small enough for one screen.\nfunction tre() {\n\ttree -aC -I '.git|node_modules|bower_components' --dirsfirst \"$@\" | less -FRNX;\n}\n","markers":{"markers":{"1":{"id":1,"range":[[236,4],[236,4]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":289,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.homesick/repos/bzdots/custom/functions.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"e8fb9ee8c7b4d51eba875ec7af6a74bf83325af2","deserializer":"TextBuffer"},{"text":"# Setup environment for development\nPROJECT_PATHS=(~/Code ~/Documents/Work ~/Projects)\n# Oracle Weblogic Middleware Home\nexport MW_HOME=\"/Users/bryce/Oracle/Middleware\"\nexport USER_MEM_ARGS=\"-Xmx1024m -XX:MaxPermSize=256m\"\n\n# export JAVA_HOME=$(/usr/libexec/java_home -v1.6)\nexport JAVA_HOME=$(/usr/libexec/java_home)\nexport MAVEN_OPTS='-Xms128m -Xmx796m -XX:PermSize=64m -XX:MaxPermSize=172m'\n\nexport DEV1_ENV=\"wmecrmd01.idexxi.com\"\nexport DEV2_ENV=\"wmecrmd02.idexxi.com\"\nexport QA1_ENV=\"wmecrmq01.idexxi.com\"\nexport QA2_ENV=\"wmecrmq02.idexxi.com\"\nexport PR1_ENV=\"wmecrmp01.idexxi.com\"\nexport PR2_ENV=\"wmecrmp02.idexxi.com\"\n\nexport IDEXX_USER_NAME=\"bfischer\"\n\n#  MOUNT POINTS FOR SSH\nexport DEV1_MOUNT=\"/Users/bryce/Mounts/beaconMounts/dev1\"\nexport DEV2_MOUNT=\"/Users/bryce/Mounts/beaconMounts/dev2\"\nexport QA1_MOUNT=\"/Users/bryce/Mounts/beaconMounts/qa1\"\nexport QA2_MOUNT=\"/Users/bryce/Mounts/beaconMounts/qa2\"\nexport PR1_MOUNT=\"/Users/bryce/Mounts/beaconMounts/pr1\"\nexport PR2_MOUNT=\"/Users/bryce/Mounts/beaconMounts/pr2\"\n\nexport BEACON_TRUNK=\"/Users/bryce/Code/BEACON\"\nexport BEACON_BRANCH=\"/Users/bryce/Code/BEACON_branch\"\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":305},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.homesick/repos/bzdots/custom/env.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2b34ecc4f9c086f52468821ef65937a288fc9f79","deserializer":"TextBuffer"},{"text":"export PATH=\"$HOME/bin:/usr/local/bin:/usr/local/sbin:$PATH\"\nexport PATH=\"$PATH:$HOME/.rbenv/bin:$HOME/.rbenv/shims\"\nexport PATH=\"$PATH:$HOME/opt/Sencha/Cmd/4.0.0.203\"\nexport PATH=\"$PATH:/Users/bryce/Development/tools/apache-maven-3.1.1/bin\" \n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":309},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.homesick/repos/bzdots/custom/paths.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"0b3b200ba2f90067981a835b6f7cd8627d32be8b","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":7,"items":[{"id":127,"softTabs":true,"displayBuffer":{"id":128,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.homesick/repos/bzdots/home/.todo.actions.d/projectsview","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":215,"softTabs":false,"displayBuffer":{"id":216,"softWrap":false,"editorWidthInChars":null,"scrollTop":1034,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.homesick/repos/bzdots/custom/aliases.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":305,"softTabs":true,"displayBuffer":{"id":306,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.homesick/repos/bzdots/custom/env.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":235,"softTabs":true,"displayBuffer":{"id":236,"softWrap":false,"editorWidthInChars":null,"scrollTop":1012,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.homesick/repos/bzdots/home/.zshrc","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":289,"softTabs":false,"displayBuffer":{"id":290,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.homesick/repos/bzdots/custom/functions.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":309,"softTabs":true,"displayBuffer":{"id":310,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.homesick/repos/bzdots/custom/paths.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":65,"softTabs":true,"displayBuffer":{"id":66,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.homesick/repos/bzdots/custom/bin/git-wtf","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":69,"softTabs":true,"displayBuffer":{"id":70,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.homesick/repos/bzdots/custom/bin/git-all","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":73,"softTabs":true,"displayBuffer":{"id":74,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.homesick/repos/bzdots/custom/bin/cloudapp","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/bryce/.homesick/repos/bzdots/custom/functions.zsh","focused":false,"deserializer":"Pane"},"activePaneId":7,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-shellscript","language-ruby"],"deserializer":"Workspace"},"windowDimensions":{"x":58,"y":22,"width":1382,"height":878},"packageStates":{"coffee-lint":{"height":0},"command-logger":{"eventLog":{"fancy-new-file:toggle":{"count":27,"name":"fancy-new-file:toggle","lastRun":1407598905969},"core:confirm":{"count":81,"name":"core:confirm","lastRun":1407701728877},"core:select-down":{"count":86,"name":"core:select-down","lastRun":1407598158351},"editor:select-to-end-of-line":{"count":9,"name":"editor:select-to-end-of-line","lastRun":1407702034277},"core:move-up":{"count":182,"name":"core:move-up","lastRun":1407598157519},"core:copy":{"count":25,"name":"core:copy","lastRun":1407702035821},"core:paste":{"count":65,"name":"core:paste","lastRun":1407598914007},"editor:newline":{"count":169,"name":"editor:newline","lastRun":1407598495019},"core:save":{"count":220,"name":"core:save","lastRun":1407598914675},"core:backspace":{"count":396,"name":"core:backspace","lastRun":1407598896165},"editor:move-to-end-of-screen-line":{"count":79,"name":"editor:move-to-end-of-screen-line","lastRun":1407598032154},"core:move-left":{"count":260,"name":"core:move-left","lastRun":1407513262861},"core:select-right":{"count":87,"name":"core:select-right","lastRun":1407701817078},"core:select-left":{"count":125,"name":"core:select-left","lastRun":1407702034670},"core:undo":{"count":58,"name":"core:undo","lastRun":1407598031805},"core:move-right":{"count":127,"name":"core:move-right","lastRun":1407598730593},"core:move-down":{"count":209,"name":"core:move-down","lastRun":1407598440489},"editor:move-to-first-character-of-line":{"count":56,"name":"editor:move-to-first-character-of-line","lastRun":1407618848887},"emmet:remove-tag":{"count":1,"name":"emmet:remove-tag","lastRun":1407246302025},"editor:indent":{"count":55,"name":"editor:indent","lastRun":1407513257531},"editor:select-to-first-character-of-line":{"count":19,"name":"editor:select-to-first-character-of-line","lastRun":1407512961616},"core:select-all":{"count":13,"name":"core:select-all","lastRun":1407598913221},"find-and-replace:select-next":{"count":3,"name":"find-and-replace:select-next","lastRun":1407246594607},"core:select-up":{"count":17,"name":"core:select-up","lastRun":1407512898132},"editor:toggle-line-comments":{"count":11,"name":"editor:toggle-line-comments","lastRun":1407512754503},"grammar-selector:show":{"count":5,"name":"grammar-selector:show","lastRun":1407512680798},"core:cancel":{"count":18,"name":"core:cancel","lastRun":1407701731757},"core:cut":{"count":7,"name":"core:cut","lastRun":1407513255938},"turbo-javascript:end-line":{"count":22,"name":"turbo-javascript:end-line","lastRun":1407512865587},"editor:newline-below":{"count":1,"name":"editor:newline-below","lastRun":1407249342726},"editor:newline-above":{"count":3,"name":"editor:newline-above","lastRun":1407249900269},"application:new-file":{"count":1,"name":"application:new-file","lastRun":1407252551909},"command-palette:toggle":{"count":3,"name":"command-palette:toggle","lastRun":1407255561324},"pretty-json:prettify":{"count":2,"name":"pretty-json:prettify","lastRun":1407255563343},"project-find:show":{"count":5,"name":"project-find:show","lastRun":1407598621197},"find-and-replace:show":{"count":12,"name":"find-and-replace:show","lastRun":1407701727200},"tree-view:move":{"count":2,"name":"tree-view:move","lastRun":1407598729975},"fuzzy-finder:toggle-file-finder":{"count":4,"name":"fuzzy-finder:toggle-file-finder","lastRun":1407598692584},"core:page-up":{"count":33,"name":"core:page-up","lastRun":1407450880897},"tabs:close-other-tabs":{"count":1,"name":"tabs:close-other-tabs","lastRun":1407458865987},"goto:file-symbol":{"count":2,"name":"goto:file-symbol","lastRun":1407508654773},"editor:move-to-end-of-word":{"count":1,"name":"editor:move-to-end-of-word","lastRun":1407508876372},"pane:split-right":{"count":1,"name":"pane:split-right","lastRun":1407509143700},"tree-view:toggle":{"count":2,"name":"tree-view:toggle","lastRun":1407509847117}}},"local-history":{"localHistoryViewState":""},"find-and-replace":{"viewState":{"findHistory":["reload","config","gina","list","TODOTXT_VERBOSE","delete",".ds"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}},"projectViewState":{"findHistory":["sourcing file","alias","EDITOR"],"replaceHistory":[],"pathsHistory":[],"modelState":{"useRegex":false,"caseSensitive":false}},"resultsModelState":{"useRegex":false,"caseSensitive":false}},"fuzzy-finder":{"/Users/bryce/.homesick/repos/bzdots/home/.todo.actions.d/projectsview":1407597509930,"/Users/bryce/.homesick/repos/bzdots/custom/aliases.zsh":1407710284480,"/Users/bryce/.homesick/repos/bzdots/custom/env.zsh":1407753658120,"/Users/bryce/.homesick/repos/bzdots/home/.zshrc":1407701645239,"/Users/bryce/.homesick/repos/bzdots/custom/functions.zsh":1407753672118,"/Users/bryce/.homesick/repos/bzdots/custom/paths.zsh":1407753670711,"/Users/bryce/.homesick/repos/bzdots/custom/bin/git-wtf":1407508898715,"/Users/bryce/.homesick/repos/bzdots/custom/bin/git-all":1407508899526,"/Users/bryce/.homesick/repos/bzdots/custom/bin/cloudapp":1407508900346},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":54227516},"tree-view":{"directoryExpansionStates":{"custom":{"bin":{}},"home":{".todo":{}}},"selectedPath":"/Users/bryce/.homesick/repos/bzdots/custom/bin","hasFocus":true,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200},"goto":{"entries":{"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh":[{"name":"version","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":9,"column":0}},{"name":"usage","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":30,"column":0}},{"name":"shorthelp","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":39,"column":0}},{"name":"help","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":85,"column":0}},{"name":"actionsHelp","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":159,"column":0}},{"name":"addonHelp","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":290,"column":0}},{"name":"actionUsage","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":317,"column":0}},{"name":"dieWithHelp","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":338,"column":0}},{"name":"die","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":348,"column":0}},{"name":"cleaninput","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":354,"column":0}},{"name":"getPrefix","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":375,"column":0}},{"name":"getTodo","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":384,"column":0}},{"name":"getNewtodo","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":398,"column":0}},{"name":"replaceOrPrepend","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":413,"column":0}},{"name":"_addto","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":753,"column":0}},{"name":"shellquote","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":770,"column":0}},{"name":"filtercommand","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":775,"column":0}},{"name":"_list","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":806,"column":0}},{"name":"getPadding","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":836,"column":0}},{"name":"_format","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":842,"column":0}},{"name":"listWordsWithSigil","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":951,"column":0}}],"/Users/bryce/.homesick/repos/bzdots/home/.todo/config":null,"/Users/bryce/.homesick/repos/bzdots/custom/bin/txml":null,"/Users/bryce/.homesick/repos/bzdots/custom/bin/bdiff":null,"/Users/bryce/.homesick/repos/bzdots/custom/bin/svnweek":null,"/Users/bryce/.homesick/repos/bzdots/home/.todo.actions.d/tickle":null,"/Users/bryce/.homesick/repos/bzdots/home/.todo.actions.d/lsgroup.py":null,"/Users/bryce/.homesick/repos/bzdots/home/.todo.actions.d/projectsview":null,"/Users/bryce/.homesick/repos/bzdots/custom/bin/templates/todolist.jade":null}}}}