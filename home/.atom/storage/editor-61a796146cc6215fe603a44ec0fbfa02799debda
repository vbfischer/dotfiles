{"mode":"editor","version":1,"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{"/Users/bryce/.homesick/repos/bzdots/custom/bin/svnweek":"source.js","/Users/bryce/.homesick/repos/bzdots/home/.todo/config":"source.shell","/Users/bryce/.homesick/repos/bzdots/custom/bin/txml":"source.js","/Users/bryce/.homesick/repos/bzdots/custom/bin/beacon_st":"source.shell"}},"project":{"path":"/Users/bryce/.homesick/repos/bzdots","buffers":[{"text":"#!/usr/bin/env ruby\n\nHELP = <<EOS\ngit-wtf displays the state of your repository in a readable, easy-to-scan\nformat. It's useful for getting a summary of how a branch relates to a remote\nserver, and for wrangling many topic branches.\n\ngit-wtf can show you:\n- How a branch relates to the remote repo, if it's a tracking branch.\n- How a branch relates to integration branches, if it's a feature branch.\n- How a branch relates to the feature branches, if it's an integration\n  branch.\n\ngit-wtf is best used before a git push, or between a git fetch and a git\nmerge. Be sure to set color.ui to auto or yes for maximum viewing pleasure.\nEOS\n\nKEY = <<EOS\nKEY:\n() branch only exists locally\n{} branch only exists on a remote repo\n[] branch exists locally and remotely\n\nx merge occurs both locally and remotely\n~ merge occurs only locally\n  (space) branch isn't merged in\n\n(It's possible for merges to occur remotely and not locally, of course, but\nthat's a less common case and git-wtf currently doesn't display anything\nspecial for it.)\nEOS\n\nUSAGE = <<EOS\nUsage: git wtf [branch+] [options]\n\nIf [branch] is not specified, git-wtf will use the current branch. The possible\n[options] are:\n\n  -l, --long          include author info and date for each commit\n  -a, --all           show all branches across all remote repos, not just\n                      those from origin\n  -A, --all-commits   show all commits, not just the first 5\n  -s, --short         don't show commits\n  -k, --key           show key\n  -r, --relations     show relation to features / integration branches\n      --dump-config   print out current configuration and exit\n\ngit-wtf uses some heuristics to determine which branches are integration\nbranches, and which are feature branches. (Specifically, it assumes the\nintegration branches are named \"master\", \"next\" and \"edge\".) If it guesses\nincorrectly, you will have to create a .git-wtfrc file.\n\nTo start building a configuration file, run \"git-wtf --dump-config >\n.git-wtfrc\" and edit it. The config file is a YAML file that specifies the\nintegration branches, any branches to ignore, and the max number of commits to\ndisplay when --all-commits isn't used.  git-wtf will look for a .git-wtfrc file\nstarting in the current directory, and recursively up to the root.\n\nIMPORTANT NOTE: all local branches referenced in .git-wtfrc must be prefixed\nwith heads/, e.g. \"heads/master\". Remote branches must be of the form\nremotes/<remote>/<branch>.\nEOS\n\nCOPYRIGHT = <<EOS\ngit-wtf Copyright 2008--2009 William Morgan <wmorgan at the masanjin dot nets>.\nThis program is free software: you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as published by the Free\nSoftware Foundation, either version 3 of the License, or (at your option)\nany later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\nFITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\nmore details.\n\nYou can find the GNU General Public License at: http://www.gnu.org/licenses/\nEOS\n\nrequire 'yaml'\nCONFIG_FN = \".git-wtfrc\"\n\nclass Numeric; def pluralize s; \"#{to_s} #{s}\" + (self != 1 ? \"s\" : \"\") end end\n\nif ARGV.delete(\"--help\") || ARGV.delete(\"-h\")\n  puts USAGE\n  exit\nend\n\n## poor man's trollop\n$long = ARGV.delete(\"--long\") || ARGV.delete(\"-l\")\n$short = ARGV.delete(\"--short\") || ARGV.delete(\"-s\")\n$all = ARGV.delete(\"--all\") || ARGV.delete(\"-a\")\n$all_commits = ARGV.delete(\"--all-commits\") || ARGV.delete(\"-A\")\n$dump_config = ARGV.delete(\"--dump-config\")\n$key = ARGV.delete(\"--key\") || ARGV.delete(\"-k\")\n$show_relations = ARGV.delete(\"--relations\") || ARGV.delete(\"-r\")\nARGV.each { |a| abort \"Error: unknown argument #{a}.\" if a =~ /^--/ }\n\n## search up the path for a file\ndef find_file fn\n  while true\n    return fn if File.exist? fn\n    fn2 = File.join(\"..\", fn)\n    return nil if File.expand_path(fn2) == File.expand_path(fn)\n    fn = fn2\n  end\nend\n\nwant_color = `git config color.wtf`\nwant_color = `git config color.ui` if want_color.empty?\n$color = case want_color.chomp\n  when \"true\"; true\n  when \"auto\"; $stdout.tty?\nend\n\ndef red s; $color ? \"\\033[31m#{s}\\033[0m\" : s end\ndef green s; $color ? \"\\033[32m#{s}\\033[0m\" : s end\ndef yellow s; $color ? \"\\033[33m#{s}\\033[0m\" : s end\ndef cyan s; $color ? \"\\033[36m#{s}\\033[0m\" : s end\ndef grey s; $color ? \"\\033[1;30m#{s}\\033[0m\" : s end\ndef purple s; $color ? \"\\033[35m#{s}\\033[0m\" : s end\n\n## the set of commits in 'to' that aren't in 'from'.\n## if empty, 'to' has been merged into 'from'.\ndef commits_between from, to\n  if $long\n    `git log --pretty=format:\"- %s [#{yellow \"%h\"}] (#{purple \"%ae\"}; %ar)\" #{from}..#{to}`\n  else\n    `git log --pretty=format:\"- %s [#{yellow \"%h\"}]\" #{from}..#{to}`\n  end.split(/[\\r\\n]+/)\nend\n\ndef show_commits commits, prefix=\"    \"\n  if commits.empty?\n    puts \"#{prefix} none\"\n  else\n    max = $all_commits ? commits.size : $config[\"max_commits\"]\n    max -= 1 if max == commits.size - 1 # never show \"and 1 more\"\n    commits[0 ... max].each { |c| puts \"#{prefix}#{c}\" }\n    puts grey(\"#{prefix}... and #{commits.size - max} more (use -A to see all).\") if commits.size > max\n  end\nend\n\ndef ahead_behind_string ahead, behind\n  [ahead.empty? ? nil : \"#{ahead.size.pluralize 'commit'} ahead\",\n   behind.empty? ? nil : \"#{behind.size.pluralize 'commit'} behind\"].\n   compact.join(\"; \")\nend\n\ndef widget merged_in, remote_only=false, local_only=false, local_only_merge=false\n  left, right = case\n    when remote_only; %w({ })\n    when local_only; %w{( )}\n    else %w([ ])\n  end\n  middle = case\n    when merged_in && local_only_merge; green(\"~\")\n    when merged_in; green(\"x\")\n    else \" \"\n  end\n  print left, middle, right\nend\n\ndef show b\n  have_both = b[:local_branch] && b[:remote_branch]\n\n  pushc, pullc, oosync = if have_both\n    [x = commits_between(b[:remote_branch], b[:local_branch]),\n     y = commits_between(b[:local_branch], b[:remote_branch]),\n     !x.empty? && !y.empty?]\n  end\n\n  if b[:local_branch]\n    puts \"Local branch: \" + green(b[:local_branch].sub(/^heads\\//, \"\"))\n\n    if have_both\n      if pushc.empty?\n        puts \"#{widget true} in sync with remote\"\n      else\n        action = oosync ? \"push after rebase / merge\" : \"push\"\n        puts \"#{widget false} NOT in sync with remote (you should #{action})\"\n        show_commits pushc unless $short\n      end\n    end\n  end\n\n  if b[:remote_branch]\n    puts \"Remote branch: #{cyan b[:remote_branch]} (#{b[:remote_url]})\"\n\n    if have_both\n      if pullc.empty?\n        puts \"#{widget true} in sync with local\"\n      else\n        action = pushc.empty? ? \"merge\" : \"rebase / merge\"\n        puts \"#{widget false} NOT in sync with local (you should #{action})\"\n        show_commits pullc unless $short\n      end\n    end\n  end\n\n  puts \"\\n#{red \"WARNING\"}: local and remote branches have diverged. A merge will occur unless you rebase.\" if oosync\nend\n\ndef show_relations b, all_branches\n  ibs, fbs = all_branches.partition { |name, br| $config[\"integration-branches\"].include?(br[:local_branch]) || $config[\"integration-branches\"].include?(br[:remote_branch]) }\n  if $config[\"integration-branches\"].include? b[:local_branch]\n    puts \"\\nFeature branches:\" unless fbs.empty?\n    fbs.each do |name, br|\n      next if $config[\"ignore\"].member?(br[:local_branch]) || $config[\"ignore\"].member?(br[:remote_branch])\n      next if br[:ignore]\n      local_only = br[:remote_branch].nil?\n      remote_only = br[:local_branch].nil?\n      name = if local_only\n        purple br[:name]\n      elsif remote_only\n        cyan br[:name]\n      else\n        green br[:name]\n      end\n\n      ## for remote_only branches, we'll compute wrt the remote branch head. otherwise, we'll\n      ## use the local branch head.\n      head = remote_only ? br[:remote_branch] : br[:local_branch]\n\n      remote_ahead = b[:remote_branch] ? commits_between(b[:remote_branch], head) : []\n      local_ahead = b[:local_branch] ? commits_between(b[:local_branch], head) : []\n\n      if local_ahead.empty? && remote_ahead.empty?\n        puts \"#{widget true, remote_only, local_only} #{name} #{local_only ? \"(local-only) \" : \"\"}is merged in\"\n      elsif local_ahead.empty?\n        puts \"#{widget true, remote_only, local_only, true} #{name} merged in (only locally)\"\n      else\n        behind = commits_between head, (br[:local_branch] || br[:remote_branch])\n        ahead = remote_only ? remote_ahead : local_ahead\n        puts \"#{widget false, remote_only, local_only} #{name} #{local_only ? \"(local-only) \" : \"\"}is NOT merged in (#{ahead_behind_string ahead, behind})\"\n        show_commits ahead unless $short\n      end\n    end\n  else\n    puts \"\\nIntegration branches:\" unless ibs.empty? # unlikely\n    ibs.sort_by { |v, br| v }.each do |v, br|\n      next if $config[\"ignore\"].member?(br[:local_branch]) || $config[\"ignore\"].member?(br[:remote_branch])\n      next if br[:ignore]\n      local_only = br[:remote_branch].nil?\n      remote_only = br[:local_branch].nil?\n      name = remote_only ? cyan(br[:name]) : green(br[:name])\n\n      ahead = commits_between v, (b[:local_branch] || b[:remote_branch])\n      if ahead.empty?\n        puts \"#{widget true, local_only} merged into #{name}\"\n      else\n        #behind = commits_between b[:local_branch], v\n        puts \"#{widget false, local_only} NOT merged into #{name} (#{ahead.size.pluralize 'commit'} ahead)\"\n        show_commits ahead unless $short\n      end\n    end\n  end\nend\n\n#### EXECUTION STARTS HERE ####\n\n## find config file and load it\n$config = { \"integration-branches\" => %w(heads/master heads/next heads/edge), \"ignore\" => [], \"max_commits\" => 5 }.merge begin\n  fn = find_file CONFIG_FN\n  if fn && (h = YAML::load_file(fn)) # yaml turns empty files into false\n    h[\"integration-branches\"] ||= h[\"versions\"] # support old nomenclature\n    h\n  else\n    {}\n  end\nend\n\nif $dump_config\n  puts $config.to_yaml\n  exit\nend\n\n## first, index registered remotes\nremotes = `git config --get-regexp ^remote\\.\\*\\.url`.split(/[\\r\\n]+/).inject({}) do |hash, l|\n  l =~ /^remote\\.(.+?)\\.url (.+)$/ or next hash\n  hash[$1] ||= $2\n  hash\nend\n\n## next, index followed branches\nbranches = `git config --get-regexp ^branch\\.`.split(/[\\r\\n]+/).inject({}) do |hash, l|\n  case l\n  when /branch\\.(.*?)\\.remote (.+)/\n    name, remote = $1, $2\n\n    hash[name] ||= {}\n    hash[name].merge! :remote => remote, :remote_url => remotes[remote]\n  when /branch\\.(.*?)\\.merge ((refs\\/)?heads\\/)?(.+)/\n    name, remote_branch = $1, $4\n    hash[name] ||= {}\n    hash[name].merge! :remote_mergepoint => remote_branch\n  end\n  hash\nend\n\n## finally, index all branches\nremote_branches = {}\n`git show-ref`.split(/[\\r\\n]+/).each do |l|\n  sha1, ref = l.chomp.split \" refs/\"\n\n  if ref =~ /^heads\\/(.+)$/ # local branch\n    name = $1\n    next if name == \"HEAD\"\n    branches[name] ||= {}\n    branches[name].merge! :name => name, :local_branch => ref\n  elsif ref =~ /^remotes\\/(.+?)\\/(.+)$/ # remote branch\n    remote, name = $1, $2\n    remote_branches[\"#{remote}/#{name}\"] = true\n    next if name == \"HEAD\"\n    ignore = !($all || remote == \"origin\")\n\n    branch = name\n    if branches[name] && branches[name][:remote] == remote\n      # nothing\n    else\n      name = \"#{remote}/#{branch}\"\n    end\n\n    branches[name] ||= {}\n    branches[name].merge! :name => name, :remote => remote, :remote_branch => \"#{remote}/#{branch}\", :remote_url => remotes[remote], :ignore => ignore\n  end\nend\n\n## assemble remotes\nbranches.each do |k, b|\n  next unless b[:remote] && b[:remote_mergepoint]\n  b[:remote_branch] = if b[:remote] == \".\"\n    b[:remote_mergepoint]\n  else\n    t = \"#{b[:remote]}/#{b[:remote_mergepoint]}\"\n    remote_branches[t] && t # only if it's still alive\n  end\nend\n\nshow_dirty = ARGV.empty?\ntargets = if ARGV.empty?\n  [`git symbolic-ref HEAD`.chomp.sub(/^refs\\/heads\\//, \"\")]\nelse\n  ARGV.map { |x| x.sub(/^heads\\//, \"\") }\nend.map { |t| branches[t] or abort \"Error: can't find branch #{t.inspect}.\" }\n\ntargets.each do |t|\n  show t\n  show_relations t, branches if $show_relations || t[:remote_branch].nil?\nend\n\nmodified = show_dirty && `git ls-files -m` != \"\"\nuncommitted = show_dirty &&  `git diff-index --cached HEAD` != \"\"\n\nif $key\n  puts\n  puts KEY\nend\n\nputs if modified || uncommitted\nputs \"#{red \"NOTE\"}: working directory contains modified files.\" if modified\nputs \"#{red \"NOTE\"}: staging area contains staged but uncommitted files.\" if uncommitted\n\n# the end!\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":65,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.homesick/repos/bzdots/custom/bin/git-wtf","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"4804293b4324aa8ae7bf66c468b879f16997bf43","deserializer":"TextBuffer"},{"text":"#!/usr/bin/env bash\n\n# Make sure we’re using the latest Homebrew\nbrew update\n\n# Upgrade any already-installed formulae\nbrew upgrade\n\n# Install GNU core utilities (those that come with OS X are outdated)\nbrew install coreutils\necho \"Don’t forget to add $(brew --prefix coreutils)/libexec/gnubin to \\$PATH.\"\n# Install GNU `find`, `locate`, `updatedb`, and `xargs`, g-prefixed\nbrew install findutils\n# Install Bash 4\nbrew install bash\n\n# Install wget with IRI support\nbrew install wget --enable-iri\n\n# Install RingoJS and Narwhal\n# Note that the order in which these are installed is important; see http://git.io/brew-narwhal-ringo.\nbrew install ringojs\nbrew install narwhal\n\n# Install more recent versions of some OS X tools\nbrew tap homebrew/dupes\nbrew install homebrew/dupes/grep\nbrew tap josegonzalez/homebrew-php\nbrew install php55\n\n# These two formulae didn’t work well last time I tried them:\n#brew install homebrew/dupes/vim\n#brew install homebrew/dupes/screen\n\n# Install other useful binaries\nbrew install ack\n#brew install exiv2\nbrew install git\n#brew install imagemagick\nbrew install lynx\nbrew install node\nbrew install pigz\nbrew install rename\nbrew install rhino\nbrew install tree\nbrew install webkit2png\nbrew install zopfli\n\nbrew tap homebrew/versions\nbrew install lua52\n\n# Remove outdated versions from the cellar\nbrew cleanup\n","markers":{"markers":{"1":{"id":1,"range":[[17,19],[17,19]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":396,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.homesick/repos/bzdots/install/brew","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"6b114eb38745c79f9869ee4e813e8ae376e913f6","deserializer":"TextBuffer"},{"text":"# Simple calculator\nfunction calc() {\n\tlocal result=\"\";\n\tresult=\"$(printf \"scale=10;$*\\n\" | bc --mathlib | tr -d '\\\\\\n')\";\n\t#                       └─ default (when `--mathlib` is used) is 20\n\t#\n\tif [[ \"$result\" == *.* ]]; then\n\t\t# improve the output for decimal numbers\n\t\tprintf \"$result\" |\n\t\tsed -e 's/^\\./0./'        `# add \"0\" for cases like \".5\"` \\\n\t\t    -e 's/^-\\./-0./'      `# add \"0\" for cases like \"-.5\"`\\\n\t\t    -e 's/0*$//;s/\\.$//';  # remove trailing zeros\n\telse\n\t\tprintf \"$result\";\n\tfi;\n\tprintf \"\\n\";\n}\n\n# Create a new directory and enter it\nfunction mkd() {\n\tmkdir -p \"$@\" && cd \"$@\";\n}\n\n# Change working directory to the top-most Finder window location\nfunction cdf() { # short for `cdfinder`\n\tcd \"$(osascript -e 'tell app \"Finder\" to POSIX path of (insertion location as alias)')\";\n}\n\n# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression\nfunction targz() {\n\tlocal tmpFile=\"${@%/}.tar\";\n\ttar -cvf \"${tmpFile}\" --exclude=\".DS_Store\" \"${@}\" || return 1;\n\n\tsize=$(\n\t\tstat -f\"%z\" \"${tmpFile}\" 2> /dev/null; # OS X `stat`\n\t\tstat -c\"%s\" \"${tmpFile}\" 2> /dev/null # GNU `stat`\n\t);\n\n\tlocal cmd=\"\";\n\tif (( size < 52428800 )) && hash zopfli 2> /dev/null; then\n\t\t# the .tar file is smaller than 50 MB and Zopfli is available; use it\n\t\tcmd=\"zopfli\";\n\telse\n\t\tif hash pigz 2> /dev/null; then\n\t\t\tcmd=\"pigz\";\n\t\telse\n\t\t\tcmd=\"gzip\";\n\t\tfi;\n\tfi;\n\n\techo \"Compressing .tar using \\`${cmd}\\`…\";\n\t\"${cmd}\" -v \"${tmpFile}\" || return 1;\n\t[ -f \"${tmpFile}\" ] && rm \"${tmpFile}\";\n\techo \"${tmpFile}.gz created successfully.\";\n}\n\n# Determine size of a file or total size of a directory\nfunction fs() {\n\tif du -b /dev/null > /dev/null 2>&1; then\n\t\tlocal arg=-sbh;\n\telse\n\t\tlocal arg=-sh;\n\tfi\n\tif [[ -n \"$@\" ]]; then\n\t\tdu $arg -- \"$@\";\n\telse\n\t\tdu $arg .[^.]* *;\n\tfi;\n}\n\n# Use Git’s colored diff when available\nhash git &>/dev/null;\nif [ $? -eq 0 ]; then\n\tfunction diff() {\n\t\tgit diff --no-index --color-words \"$@\";\n\t}\nfi;\n\n# Create a data URL from a file\nfunction dataurl() {\n\tlocal mimeType=$(file -b --mime-type \"$1\");\n\tif [[ $mimeType == text/* ]]; then\n\t\tmimeType=\"${mimeType};charset=utf-8\";\n\tfi\n\techo \"data:${mimeType};base64,$(openssl base64 -in \"$1\" | tr -d '\\n')\";\n}\n\n# Create a git.io short URL\nfunction gitio() {\n\tif [ -z \"${1}\" -o -z \"${2}\" ]; then\n\t\techo \"Usage: \\`gitio slug url\\`\";\n\t\treturn 1;\n\tfi;\n\tcurl -i http://git.io/ -F \"url=${2}\" -F \"code=${1}\";\n}\n\n# Start an HTTP server from a directory, optionally specifying the port\nfunction server() {\n\tlocal port=\"${1:-8000}\";\n\tsleep 1 && open \"http://localhost:${port}/\" &\n\t# Set the default Content-Type to `text/plain` instead of `application/octet-stream`\n\t# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)\n\tpython -c $'import SimpleHTTPServer;\\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\\nmap[\"\"] = \"text/plain\";\\nfor key, value in map.items():\\n\\tmap[key] = value + \";charset=UTF-8\";\\nSimpleHTTPServer.test();' \"$port\";\n}\n\n# Start a PHP server from a directory, optionally specifying the port\n# (Requires PHP 5.4.0+.)\nfunction phpserver() {\n\tlocal port=\"${1:-4000}\";\n\tlocal ip=$(ipconfig getifaddr en1);\n\tsleep 1 && open \"http://${ip}:${port}/\" &\n\tphp -S \"${ip}:${port}\";\n}\n\n# Compare original and gzipped file size\nfunction gz() {\n\tlocal origsize=$(wc -c < \"$1\");\n\tlocal gzipsize=$(gzip -c \"$1\" | wc -c);\n\tlocal ratio=$(echo \"$gzipsize * 100 / $origsize\" | bc -l);\n\tprintf \"orig: %d bytes\\n\" \"$origsize\";\n\tprintf \"gzip: %d bytes (%2.2f%%)\\n\" \"$gzipsize\" \"$ratio\";\n}\n\n# Syntax-highlight JSON strings or files\n# Usage: `json '{\"foo\":42}'` or `echo '{\"foo\":42}' | json`\nfunction json() {\n\tif [ -t 0 ]; then # argument\n\t\tpython -mjson.tool <<< \"$*\" | pygmentize -l javascript;\n\telse # pipe\n\t\tpython -mjson.tool | pygmentize -l javascript;\n\tfi;\n}\n\n# Run `dig` and display the most useful info\nfunction digga() {\n\tdig +nocmd \"$1\" any +multiline +noall +answer;\n}\n\n# UTF-8-encode a string of Unicode symbols\nfunction escape() {\n\tprintf \"\\\\\\x%s\" $(printf \"$@\" | xxd -p -c1 -u);\n\t# print a newline unless we’re piping the output to another program\n\tif [ -t 1 ]; then\n\t\techo \"\"; # newline\n\tfi;\n}\n\n# Decode \\x{ABCD}-style Unicode escape sequences\nfunction unidecode() {\n\tperl -e \"binmode(STDOUT, ':utf8'); print \\\"$@\\\"\";\n\t# print a newline unless we’re piping the output to another program\n\tif [ -t 1 ]; then\n\t\techo \"\"; # newline\n\tfi;\n}\n\n# Get a character’s Unicode code point\nfunction codepoint() {\n\tperl -e \"use utf8; print sprintf('U+%04X', ord(\\\"$@\\\"))\";\n\t# print a newline unless we’re piping the output to another program\n\tif [ -t 1 ]; then\n\t\techo \"\"; # newline\n\tfi;\n}\n\n# Show all the names (CNs and SANs) listed in the SSL certificate\n# for a given domain\nfunction getcertnames() {\n\tif [ -z \"${1}\" ]; then\n\t\techo \"ERROR: No domain specified.\";\n\t\treturn 1;\n\tfi;\n\n\tlocal domain=\"${1}\";\n\techo \"Testing ${domain}…\";\n\techo \"\"; # newline\n\n\tlocal tmp=$(echo -e \"GET / HTTP/1.0\\nEOT\" \\\n\t\t| openssl s_client -connect \"${domain}:443\" 2>&1);\n\n\tif [[ \"${tmp}\" = *\"-----BEGIN CERTIFICATE-----\"* ]]; then\n\t\tlocal certText=$(echo \"${tmp}\" \\\n\t\t\t| openssl x509 -text -certopt \"no_header, no_serial, no_version, \\\n\t\t\tno_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux\");\n\t\t\techo \"Common Name:\";\n\t\t\techo \"\"; # newline\n\t\t\techo \"${certText}\" | grep \"Subject:\" | sed -e \"s/^.*CN=//\";\n\t\t\techo \"\"; # newline\n\t\t\techo \"Subject Alternative Name(s):\";\n\t\t\techo \"\"; # newline\n\t\t\techo \"${certText}\" | grep -A 1 \"Subject Alternative Name:\" \\\n\t\t\t\t| sed -e \"2s/DNS://g\" -e \"s/ //g\" | tr \",\" \"\\n\" | tail -n +2;\n\t\t\treturn 0;\n\telse\n\t\techo \"ERROR: Certificate not found.\";\n\t\treturn 1;\n\tfi;\n}\n\n# `s` with no arguments opens the current directory in Sublime Text, otherwise\n# opens the given location\nfunction s() {\n\tif [ $# -eq 0 ]; then\n\t\tsubl .;\n\telse\n\t\tsubl \"$@\";\n\tfi;\n}\n\n# `a` with no arguments opens the current directory in Atom Editor, otherwise\n# opens the given location\nfunction a() {\n\tif [ $# -eq 0 ]; then\n\t\tatom .;\n\telse\n\t\tatom \"$@\";\n\tfi;\n}\n\n# `v` with no arguments opens the current directory in Vim, otherwise opens the\n# given location\nfunction v() {\n\tif [ $# -eq 0 ]; then\n\t\tvim .;\n\telse\n\t\tvim \"$@\";\n\tfi;\n}\n\n# `o` with no arguments opens the current directory, otherwise opens the given\n# location\nfunction o() {\n\tif [ $# -eq 0 ]; then\n\t\topen .;\n\telse\n\t\topen \"$@\";\n\tfi;\n}\n\n# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring\n# the `.git` directory, listing directories first. The output gets piped into\n# `less` with options to preserve color and line numbers, unless the output is\n# small enough for one screen.\nfunction tre() {\n\ttree -aC -I '.git|node_modules|bower_components' --dirsfirst \"$@\" | less -FRNX;\n}\n\nfunction gi() {\n\tcurl http://www.gitignore.io/api/$@;\n\t\n}\n","markers":{"markers":{"1":{"id":1,"range":[[249,1],[249,1]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":462,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"15":{"id":15,"range":[[246,0],[250,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"21":{"id":21,"range":[[246,0],[250,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[248,36],[248,36]],"newRange":[[248,36],[248,37]],"oldText":"","newText":";","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[248,37],[248,37]],"newRange":[[248,37],[249,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[249,0],[249,0]],"newRange":[[249,0],[249,1]],"oldText":"","newText":"\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.homesick/repos/bzdots/custom/functions.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"6d91b5a21eb44b03a76853811b83ddec74ac2fb6","deserializer":"TextBuffer"},{"text":"alias todo=todo.sh\nalias week='date +%V'\n\nalias db=\"cd ~/Dropbox\"\nalias dl=\"cd ~/Downloads\"\nalias dt=\"cd ~/Desktop\"\nalias p=\"cd ~/projects\"\n\nalias svu=\"svn update\"\n\n# List only directories\nalias lsd=\"ls -lF ${colorflag} | grep --color=never '^d'\"\n\n# Get week number\nalias week='date +%V'\n\n# Stopwatch\nalias timer='echo \"Timer started. Stop with Ctrl-D.\" && date && time cat && date'\n\n# Enable aliases to be sudo’ed\nalias sudo='sudo '\n\n# Get OS X Software Updates, and update installed Ruby gems, Homebrew, npm, and their installed packages\nalias update='sudo softwareupdate -i -a; brew update; brew upgrade; brew cleanup; npm update npm -g; npm update -g; sudo gem update --system; sudo gem update'\n\n# IP addresses\nalias ip=\"dig +short myip.opendns.com @resolver1.opendns.com\"\nalias localip=\"ipconfig getifaddr en0\"\nalias ips=\"ifconfig -a | grep -o 'inet6\\? \\(addr:\\)\\?\\s\\?\\(\\(\\([0-9]\\+\\.\\)\\{3\\}[0-9]\\+\\)\\|[a-fA-F0-9:]\\+\\)' | awk '{ sub(/inet6? (addr:)? ?/, \\\"\\\"); print }'\"\n\n# View HTTP traffic\nalias sniff=\"sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'\"\nalias httpdump=\"sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \\\"Host\\: .*|GET \\/.*\\\"\"\n\n# Canonical hex dump; some systems have this symlinked\ncommand -v hd > /dev/null || alias hd=\"hexdump -C\"\n\n# OS X has no `md5sum`, so use `md5` as a fallback\ncommand -v md5sum > /dev/null || alias md5sum=\"md5\"\n\n# OS X has no `sha1sum`, so use `shasum` as a fallback\ncommand -v sha1sum > /dev/null || alias sha1sum=\"shasum\"\n\n# JavaScriptCore REPL\njscbin=\"/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc\";\n[ -e \"${jscbin}\" ] && alias jsc=\"${jscbin}\";\nunset jscbin;\n\n# Trim new lines and copy to clipboard\nalias c=\"tr -d '\\n' | pbcopy\"\n\n# Recursively delete `.DS_Store` files\nalias cleanup=\"find . -type f -name '*.DS_Store' -ls -delete\"\n\n# Empty the Trash on all mounted volumes and the main HDD\n# Also, clear Apple’s System Logs to improve shell startup speed\nalias emptytrash=\"sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl\"\n\n# Show/hide hidden files in Finder\nalias show=\"defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder\"\nalias hide=\"defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder\"\n\n# Hide/show all desktop icons (useful when presenting)\nalias hidedesktop=\"defaults write com.apple.finder CreateDesktop -bool false && killall Finder\"\nalias showdesktop=\"defaults write com.apple.finder CreateDesktop -bool true && killall Finder\"\n\n# URL-encode strings\nalias urlencode='python -c \"import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);\"'\n\n# Merge PDF files\n# Usage: `mergepdf -o output.pdf input{1,2,3}.pdf`\nalias mergepdf='/System/Library/Automator/Combine\\ PDF\\ Pages.action/Contents/Resources/join.py'\n\n# Disable Spotlight\nalias spotoff=\"sudo mdutil -a -i off\"\n# Enable Spotlight\nalias spoton=\"sudo mdutil -a -i on\"\n\n# PlistBuddy alias, because sometimes `defaults` just doesn’t cut it\nalias plistbuddy=\"/usr/libexec/PlistBuddy\"\n\n# Ring the terminal bell, and put a badge on Terminal.app’s Dock icon\n# (useful when executing time-consuming commands)\nalias badge=\"tput bel\"\n\n# Intuitive map function\n# For example, to list all directories that contain a certain file:\n# find . -name .gitattributes | map dirname\nalias map=\"xargs -n1\"\n\n# One of @janmoesen’s ProTip™s\nfor method in GET HEAD POST PUT DELETE TRACE OPTIONS; do\n\talias \"$method\"=\"lwp-request -m '$method'\"\ndone\n\n\n# Make Grunt print stack traces by default\ncommand -v grunt > /dev/null && alias grunt=\"grunt --stack\"\n\n# Stuff I never really use but cannot delete either because of http://xkcd.com/530/\nalias stfu=\"osascript -e 'set volume output muted true'\"\nalias pumpitup=\"osascript -e 'set volume 7'\"\n\n# Kill all the tabs in Chrome to free up memory\n# [C] explained: http://www.commandlinefu.com/commands/view/402/exclude-grep-from-your-grepped-output-of-ps-alias-included-in-description\nalias chromekill=\"ps ux | grep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill\"\n\n# Lock the screen (when going AFK)\nalias afk=\"/System/Library/CoreServices/Menu\\ Extras/User.menu/Contents/Resources/CGSession -suspend\"\n\n# Reload the shell (i.e. invoke as a login shell)\nalias reload=\"exec $SHELL -l\"\n\n# other\ndiv() {\n\tlocal columns=$(($(tput cols) - 8))\n\tlocal line=$(printf '%0.1s' \"-\"{1..500})\n\tprintf \"\\e[01;31m---- 8< ${line:0:${columns}}\\e[0m\\n\"\n}\n","markers":{"markers":{"1":{"id":1,"range":[[8,21],[8,21]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":466,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"18":{"id":18,"range":[[8,10],[8,21]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"31":{"id":31,"range":[[8,0],[9,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"32":{"id":32,"range":[[112,0],[118,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.homesick/repos/bzdots/custom/aliases.zsh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"24ca5d62cc66d7b689a6f736f95cbfb542aca61b","deserializer":"TextBuffer"},{"text":"# General Configuratoin\nconfig windowHintsShowIcons true\nconfig windowHintsFontColor 255;0;0;1.0\nconfig windowHintsIgnoreHiddenWindows false\nconfig windowHintsSpread true\nconfig windowHintsSpreadSearchWidth 200\nconfig windowHintsSpreadSearchHeight 200\nconfig windowHintsSpreadPadding 200\nconfig undoOps move,resize\nconfig orderScreensLeftToRight true\n\nalias hyper ctrl;shift;alt;cmd\nalias showNormalHint hint AOEUIDHTNSYXFBPKGMCW\nalias showHintsLeftHand hint AOEUIYQJKX\n\n# General aliases\nalias sox screenOriginX\nalias soy screenOriginY\nalias ssx screenSizeX\nalias ssy screenSizeY\n\n# Position aliases\nalias centered ${sox}+${ssx}/8;${soy}+${ssy}/8 ${ssx}/8*6;${ssy}/8*6\nalias fullscreen ${sox};${soy} ${ssx};${ssy}\nalias leftHalf ${sox};${soy} ${ssx}/2;${ssy}\nalias bottomHalf ${sox};${soy}+${ssy}/2 ${ssx};${ssy}/2\nalias bottomQuarter ${sox};${soy}+${ssy}/4 ${ssx};${ssy}/4\nalias topHalf ${sox};${soy} ${ssx};${ssy}/2\nalias rightHalf ${sox}+${ssx}/2;${soy} ${ssx}/2;${ssy}\nalias topLeftQuarter ${sox};${soy} ${ssx}/2;${ssy}/2\nalias topRightQuarter ${sox}+${ssx}/2;${soy} ${ssx}/2;${ssy}/2\nalias bottomLeftQuarter ${sox};${soy}+${ssy}/2 ${ssx}/2;${ssy}/2\nalias bottomRightQuarter ${sox}+${ssx}/2;${soy}+${ssy}/2 ${ssx}/2;${ssy}/2\n\nbind e:cmd;alt;ctrl;shift ${showHintsLeftHand}\nbind backslash:${hyper} relaunch\n\nbind right:${hyper} push right bar-resize:screenSizeX/2\nbind left:${hyper}  push left  bar-resize:screenSizeX/2\n#bind up:${hyper}    push up    bar-resize:screenSizeY/2\nbind up:${hyper}    push up    bar-resize:screenSizeY/1.5\n#bind down:${hyper}  push down  bar-resize:screenSizeY/2\nbind down:${hyper}  push down  bar-resize:screenSizeY/3\n\nbind g:${hyper} move ${centered}\nbind o:${hyper} move ${fullscreen}\nbind u:${hyper} corner top-left resize:screenSizeX/2;screenSizeY/2\nbind i:${hyper} corner top-right resize:screenSizeX/2;screenSizeY/2\nbind n:${hyper} corner bottom-left  resize:screenSizeX/2;screenSizeY/2\nbind m:${hyper} corner bottom-right resize:screenSizeX/2;screenSizeY/2\n\nbind ':${hyper} throw previous\nbind ;:${hyper} throw next\nbind 1:${hyper} throw 0\nbind 2:${hyper} throw 1\nbind 3:${hyper} throw 2\n\n#bind 1:${hyper} grid\n\nbind a:${hyper} focus 'Atom'\nbind j:${hyper} focus 'IntelliJ IDEA'\nbind s:${hyper} focus 'Safari'\nbind t:${hyper} focus 'iTerm'\nbind c:${hyper} focus 'Google Chrome'\n\nbind =:${hyper} resize +0 +10%\nbind -:${hyper} resize +0 -10%\nbind [:${hyper} resize -10% 0\nbind ]:${hyper} resize +10% 0\n","markers":{"markers":{"1":{"id":1,"range":[[69,0],[69,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":474,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"52":{"id":52,"range":[[68,0],[68,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[{"patches":[{"oldRange":[[69,0],[69,1]],"newRange":[[69,0],[69,0]],"oldText":"!","newText":"","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"deserializer":"History"},"filePath":"/Users/bryce/.homesick/repos/bzdots/home/.slate","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"65c1d193f42092882dc0852d48d289286d69a653","deserializer":"TextBuffer"},{"text":"#!/usr/bin/env bash\n\n\n\nsvn diff $1 -r $2\n","markers":{"markers":{"1":{"id":1,"range":[[2,0],[2,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":521,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"id":1,"oldParams":{"properties":{"type":"selection","editorId":521}},"newParams":{"properties":{"type":"selection","editorId":521,"goalBufferRange":null}},"deserializer":"MarkerPatch"},{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,19]],"oldText":"","newText":"#!/usr/bin/env bash","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,19],[0,19]],"newRange":[[0,19],[1,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[1,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[2,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[2,0],[2,0]],"newRange":[[2,0],[2,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,0],[2,0]],"newRange":[[2,0],[2,1]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,1],[2,1]],"newRange":[[2,1],[2,2]],"oldText":"","newText":"v","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,2],[2,2]],"newRange":[[2,2],[2,3]],"oldText":"","newText":"n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,3],[2,3]],"newRange":[[2,3],[2,4]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,4],[2,4]],"newRange":[[2,4],[2,5]],"oldText":"","newText":"d","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,5],[2,5]],"newRange":[[2,5],[2,6]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,6],[2,6]],"newRange":[[2,6],[2,7]],"oldText":"","newText":"v","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,7],[2,7]],"newRange":[[2,7],[2,8]],"oldText":"","newText":"v","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,8],[2,8]],"newRange":[[2,8],[2,9]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[2,9],[2,9]]},"newParams":{"reversed":true,"range":[[2,8],[2,9]]},"deserializer":"MarkerPatch"},{"oldRange":[[2,8],[2,9]],"newRange":[[2,8],[2,8]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[2,8],[2,8]]},"newParams":{"range":[[2,7],[2,8]]},"deserializer":"MarkerPatch"},{"oldRange":[[2,7],[2,8]],"newRange":[[2,7],[2,7]],"oldText":"v","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[2,7],[2,7]]},"newParams":{"range":[[2,6],[2,7]]},"deserializer":"MarkerPatch"},{"oldRange":[[2,6],[2,7]],"newRange":[[2,6],[2,6]],"oldText":"v","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,6],[2,6]],"newRange":[[2,6],[2,7]],"oldText":"","newText":"f","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,7],[2,7]],"newRange":[[2,7],[2,8]],"oldText":"","newText":"f","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,8],[2,8]],"newRange":[[2,8],[2,9]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,9],[2,9]],"newRange":[[2,9],[2,10]],"oldText":"","newText":"$","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,10],[2,10]],"newRange":[[2,10],[2,11]],"oldText":"","newText":"1","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,11],[2,11]],"newRange":[[2,11],[2,12]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,12],[2,12]],"newRange":[[2,12],[2,13]],"oldText":"","newText":"-","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,13],[2,13]],"newRange":[[2,13],[2,14]],"oldText":"","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,14],[2,14]],"newRange":[[2,14],[2,15]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,15],[2,15]],"newRange":[[2,15],[2,16]],"oldText":"","newText":"$","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,16],[2,16]],"newRange":[[2,16],[2,17]],"oldText":"","newText":"2","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[2,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[2,0],[2,0]],"newRange":[[2,0],[2,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,0],[2,0]],"newRange":[[2,0],[3,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[3,0],[3,0]],"newRange":[[3,0],[3,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[4,17],[4,17]],"newRange":[[4,17],[5,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":true},"newParams":{"reversed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.homesick/repos/bzdots/custom/bin/sdiff","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"a0f60f82dfa4701b795f77fd05354ec997f061e4","deserializer":"TextBuffer"},{"text":"#!/bin/sh\n\nBEACON_TRUNK=/Users/bryce/Code/BEACON\nBEACON_BRANCH=/Users/bryce/Code/BEACON_branch\n\norigFile=$BEACON_TRUNK/$1\nbranchFile=$BEACON_BRANCH/$1\n\nksdiff $origFile $branchFile\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":526},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/bryce/.homesick/repos/bzdots/custom/bin/bdiff","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"0e73bc51952eb28c9407c8d0b66f6dba94770101","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":7,"items":[{"id":396,"softTabs":true,"displayBuffer":{"id":397,"softWrap":false,"editorWidthInChars":null,"scrollTop":497,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.homesick/repos/bzdots/install/brew","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":462,"softTabs":false,"displayBuffer":{"id":463,"softWrap":false,"editorWidthInChars":null,"scrollTop":5264,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.homesick/repos/bzdots/custom/functions.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":521,"softTabs":true,"displayBuffer":{"id":522,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.homesick/repos/bzdots/custom/bin/sdiff","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":526,"softTabs":true,"displayBuffer":{"id":527,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.homesick/repos/bzdots/custom/bin/bdiff","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":466,"softTabs":false,"displayBuffer":{"id":467,"softWrap":false,"editorWidthInChars":null,"scrollTop":524,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.homesick/repos/bzdots/custom/aliases.zsh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":474,"softTabs":true,"displayBuffer":{"id":475,"softWrap":false,"editorWidthInChars":null,"scrollTop":736,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.homesick/repos/bzdots/home/.slate","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":65,"softTabs":true,"displayBuffer":{"id":66,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/bryce/.homesick/repos/bzdots/custom/bin/git-wtf","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/bryce/.homesick/repos/bzdots/custom/bin/sdiff","focused":true,"deserializer":"Pane"},"activePaneId":7,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-shellscript","language-ruby"],"deserializer":"Workspace"},"windowDimensions":{"x":33,"y":22,"width":1382,"height":878},"packageStates":{"coffee-lint":{"height":0},"command-logger":{"eventLog":{"fancy-new-file:toggle":{"count":32,"name":"fancy-new-file:toggle","lastRun":1407868393069},"core:confirm":{"count":89,"name":"core:confirm","lastRun":1407868410898},"core:select-down":{"count":117,"name":"core:select-down","lastRun":1407778711852},"editor:select-to-end-of-line":{"count":9,"name":"editor:select-to-end-of-line","lastRun":1407702034277},"core:move-up":{"count":230,"name":"core:move-up","lastRun":1407868437966},"core:copy":{"count":27,"name":"core:copy","lastRun":1407868417362},"core:paste":{"count":74,"name":"core:paste","lastRun":1407868424312},"editor:newline":{"count":199,"name":"editor:newline","lastRun":1407868437709},"core:save":{"count":244,"name":"core:save","lastRun":1407868454484},"core:backspace":{"count":447,"name":"core:backspace","lastRun":1407868430441},"editor:move-to-end-of-screen-line":{"count":85,"name":"editor:move-to-end-of-screen-line","lastRun":1407785013473},"core:move-left":{"count":263,"name":"core:move-left","lastRun":1407785013837},"core:select-right":{"count":97,"name":"core:select-right","lastRun":1407760409194},"core:select-left":{"count":132,"name":"core:select-left","lastRun":1407760285870},"core:undo":{"count":63,"name":"core:undo","lastRun":1407868453896},"core:move-right":{"count":137,"name":"core:move-right","lastRun":1407760328542},"core:move-down":{"count":252,"name":"core:move-down","lastRun":1407761943683},"editor:move-to-first-character-of-line":{"count":64,"name":"editor:move-to-first-character-of-line","lastRun":1407778707495},"emmet:remove-tag":{"count":1,"name":"emmet:remove-tag","lastRun":1407246302025},"editor:indent":{"count":59,"name":"editor:indent","lastRun":1407785015203},"editor:select-to-first-character-of-line":{"count":21,"name":"editor:select-to-first-character-of-line","lastRun":1407760201967},"core:select-all":{"count":13,"name":"core:select-all","lastRun":1407598913221},"find-and-replace:select-next":{"count":3,"name":"find-and-replace:select-next","lastRun":1407246594607},"core:select-up":{"count":17,"name":"core:select-up","lastRun":1407512898132},"editor:toggle-line-comments":{"count":11,"name":"editor:toggle-line-comments","lastRun":1407512754503},"grammar-selector:show":{"count":6,"name":"grammar-selector:show","lastRun":1407759979912},"core:cancel":{"count":19,"name":"core:cancel","lastRun":1407760677840},"core:cut":{"count":7,"name":"core:cut","lastRun":1407513255938},"turbo-javascript:end-line":{"count":22,"name":"turbo-javascript:end-line","lastRun":1407512865587},"editor:newline-below":{"count":1,"name":"editor:newline-below","lastRun":1407249342726},"editor:newline-above":{"count":3,"name":"editor:newline-above","lastRun":1407249900269},"application:new-file":{"count":1,"name":"application:new-file","lastRun":1407252551909},"command-palette:toggle":{"count":3,"name":"command-palette:toggle","lastRun":1407255561324},"pretty-json:prettify":{"count":2,"name":"pretty-json:prettify","lastRun":1407255563343},"project-find:show":{"count":5,"name":"project-find:show","lastRun":1407598621197},"find-and-replace:show":{"count":14,"name":"find-and-replace:show","lastRun":1407760687830},"tree-view:move":{"count":2,"name":"tree-view:move","lastRun":1407598729975},"fuzzy-finder:toggle-file-finder":{"count":5,"name":"fuzzy-finder:toggle-file-finder","lastRun":1407760672924},"core:page-up":{"count":33,"name":"core:page-up","lastRun":1407450880897},"tabs:close-other-tabs":{"count":1,"name":"tabs:close-other-tabs","lastRun":1407458865987},"goto:file-symbol":{"count":2,"name":"goto:file-symbol","lastRun":1407508654773},"editor:move-to-end-of-word":{"count":1,"name":"editor:move-to-end-of-word","lastRun":1407508876372},"pane:split-right":{"count":1,"name":"pane:split-right","lastRun":1407509143700},"tree-view:toggle":{"count":2,"name":"tree-view:toggle","lastRun":1407509847117},"core:redo":{"count":1,"name":"core:redo","lastRun":1407778749024},"turbo-javascript:end-new-line":{"count":2,"name":"turbo-javascript:end-new-line","lastRun":1407868391241}}},"local-history":{"localHistoryViewState":""},"find-and-replace":{"viewState":{"findHistory":["reload","config","gina","list","TODOTXT_VERBOSE","delete",".ds","cask"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}},"projectViewState":{"findHistory":["sourcing file","alias","EDITOR"],"replaceHistory":[],"pathsHistory":[],"modelState":{"useRegex":false,"caseSensitive":false}},"resultsModelState":{"useRegex":false,"caseSensitive":false}},"fuzzy-finder":{"/Users/bryce/.homesick/repos/bzdots/install/brew":1407868420712,"/Users/bryce/.homesick/repos/bzdots/custom/functions.zsh":1407843796113,"/Users/bryce/.homesick/repos/bzdots/custom/bin/sdiff":1407868423583,"/Users/bryce/.homesick/repos/bzdots/custom/bin/bdiff":1407868422626,"/Users/bryce/.homesick/repos/bzdots/custom/aliases.zsh":1407777324015,"/Users/bryce/.homesick/repos/bzdots/home/.slate":1407778654119,"/Users/bryce/.homesick/repos/bzdots/custom/bin/git-wtf":1407760179393},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":30293302},"tree-view":{"directoryExpansionStates":{"custom":{"bin":{}},"home":{".todo":{}},"install":{}},"selectedPath":"/Users/bryce/.homesick/repos/bzdots/custom/bin/sdiff","hasFocus":false,"attached":true,"scrollLeft":2,"scrollTop":0,"width":200},"goto":{"entries":{"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh":[{"name":"version","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":9,"column":0}},{"name":"usage","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":30,"column":0}},{"name":"shorthelp","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":39,"column":0}},{"name":"help","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":85,"column":0}},{"name":"actionsHelp","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":159,"column":0}},{"name":"addonHelp","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":290,"column":0}},{"name":"actionUsage","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":317,"column":0}},{"name":"dieWithHelp","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":338,"column":0}},{"name":"die","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":348,"column":0}},{"name":"cleaninput","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":354,"column":0}},{"name":"getPrefix","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":375,"column":0}},{"name":"getTodo","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":384,"column":0}},{"name":"getNewtodo","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":398,"column":0}},{"name":"replaceOrPrepend","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":413,"column":0}},{"name":"_addto","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":753,"column":0}},{"name":"shellquote","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":770,"column":0}},{"name":"filtercommand","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":775,"column":0}},{"name":"_list","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":806,"column":0}},{"name":"getPadding","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":836,"column":0}},{"name":"_format","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":842,"column":0}},{"name":"listWordsWithSigil","path":"/Users/bryce/.homesick/repos/bzdots/custom/bin/todo.sh","position":{"row":951,"column":0}}],"/Users/bryce/.homesick/repos/bzdots/home/.todo/config":null,"/Users/bryce/.homesick/repos/bzdots/custom/bin/txml":null,"/Users/bryce/.homesick/repos/bzdots/custom/bin/bdiff":null,"/Users/bryce/.homesick/repos/bzdots/custom/bin/svnweek":null,"/Users/bryce/.homesick/repos/bzdots/home/.todo.actions.d/tickle":null,"/Users/bryce/.homesick/repos/bzdots/home/.todo.actions.d/lsgroup.py":null,"/Users/bryce/.homesick/repos/bzdots/home/.todo.actions.d/projectsview":null,"/Users/bryce/.homesick/repos/bzdots/custom/bin/templates/todolist.jade":null}}}}